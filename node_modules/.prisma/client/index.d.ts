
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model RefreshToken
 * 
 */
export type RefreshToken = $Result.DefaultSelection<Prisma.$RefreshTokenPayload>
/**
 * Model Trade
 * 
 */
export type Trade = $Result.DefaultSelection<Prisma.$TradePayload>
/**
 * Model TradePicture
 * 
 */
export type TradePicture = $Result.DefaultSelection<Prisma.$TradePicturePayload>
/**
 * Model TradeComment
 * 
 */
export type TradeComment = $Result.DefaultSelection<Prisma.$TradeCommentPayload>
/**
 * Model History
 * 
 */
export type History = $Result.DefaultSelection<Prisma.$HistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const GenderType: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type GenderType = (typeof GenderType)[keyof typeof GenderType]


export const ProviderType: {
  LOCAL: 'LOCAL',
  KAKAO: 'KAKAO',
  GOOLE: 'GOOLE'
};

export type ProviderType = (typeof ProviderType)[keyof typeof ProviderType]


export const RoleType: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type RoleType = (typeof RoleType)[keyof typeof RoleType]


export const TradeType: {
  PURCHASE: 'PURCHASE',
  SALE: 'SALE'
};

export type TradeType = (typeof TradeType)[keyof typeof TradeType]

}

export type GenderType = $Enums.GenderType

export const GenderType: typeof $Enums.GenderType

export type ProviderType = $Enums.ProviderType

export const ProviderType: typeof $Enums.ProviderType

export type RoleType = $Enums.RoleType

export const RoleType: typeof $Enums.RoleType

export type TradeType = $Enums.TradeType

export const TradeType: typeof $Enums.TradeType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.refreshToken`: Exposes CRUD operations for the **RefreshToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RefreshTokens
    * const refreshTokens = await prisma.refreshToken.findMany()
    * ```
    */
  get refreshToken(): Prisma.RefreshTokenDelegate<ExtArgs>;

  /**
   * `prisma.trade`: Exposes CRUD operations for the **Trade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trades
    * const trades = await prisma.trade.findMany()
    * ```
    */
  get trade(): Prisma.TradeDelegate<ExtArgs>;

  /**
   * `prisma.tradePicture`: Exposes CRUD operations for the **TradePicture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradePictures
    * const tradePictures = await prisma.tradePicture.findMany()
    * ```
    */
  get tradePicture(): Prisma.TradePictureDelegate<ExtArgs>;

  /**
   * `prisma.tradeComment`: Exposes CRUD operations for the **TradeComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TradeComments
    * const tradeComments = await prisma.tradeComment.findMany()
    * ```
    */
  get tradeComment(): Prisma.TradeCommentDelegate<ExtArgs>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **History** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.HistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    RefreshToken: 'RefreshToken',
    Trade: 'Trade',
    TradePicture: 'TradePicture',
    TradeComment: 'TradeComment',
    History: 'History'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'refreshToken' | 'trade' | 'tradePicture' | 'tradeComment' | 'history'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      RefreshToken: {
        payload: Prisma.$RefreshTokenPayload<ExtArgs>
        fields: Prisma.RefreshTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findFirst: {
            args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          findMany: {
            args: Prisma.RefreshTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
          }
          create: {
            args: Prisma.RefreshTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          createMany: {
            args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RefreshTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          update: {
            args: Prisma.RefreshTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          deleteMany: {
            args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RefreshTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
          }
          aggregate: {
            args: Prisma.RefreshTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRefreshToken>
          }
          groupBy: {
            args: Prisma.RefreshTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RefreshTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.RefreshTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<RefreshTokenCountAggregateOutputType> | number
          }
        }
      }
      Trade: {
        payload: Prisma.$TradePayload<ExtArgs>
        fields: Prisma.TradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TradeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TradeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          findFirst: {
            args: Prisma.TradeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TradeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          findMany: {
            args: Prisma.TradeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>[]
          }
          create: {
            args: Prisma.TradeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          createMany: {
            args: Prisma.TradeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TradeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          update: {
            args: Prisma.TradeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          deleteMany: {
            args: Prisma.TradeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TradeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TradeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePayload>
          }
          aggregate: {
            args: Prisma.TradeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTrade>
          }
          groupBy: {
            args: Prisma.TradeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TradeCountArgs<ExtArgs>,
            result: $Utils.Optional<TradeCountAggregateOutputType> | number
          }
        }
      }
      TradePicture: {
        payload: Prisma.$TradePicturePayload<ExtArgs>
        fields: Prisma.TradePictureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TradePictureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TradePictureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>
          }
          findFirst: {
            args: Prisma.TradePictureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TradePictureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>
          }
          findMany: {
            args: Prisma.TradePictureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>[]
          }
          create: {
            args: Prisma.TradePictureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>
          }
          createMany: {
            args: Prisma.TradePictureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TradePictureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>
          }
          update: {
            args: Prisma.TradePictureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>
          }
          deleteMany: {
            args: Prisma.TradePictureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TradePictureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TradePictureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradePicturePayload>
          }
          aggregate: {
            args: Prisma.TradePictureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTradePicture>
          }
          groupBy: {
            args: Prisma.TradePictureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TradePictureGroupByOutputType>[]
          }
          count: {
            args: Prisma.TradePictureCountArgs<ExtArgs>,
            result: $Utils.Optional<TradePictureCountAggregateOutputType> | number
          }
        }
      }
      TradeComment: {
        payload: Prisma.$TradeCommentPayload<ExtArgs>
        fields: Prisma.TradeCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TradeCommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TradeCommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>
          }
          findFirst: {
            args: Prisma.TradeCommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TradeCommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>
          }
          findMany: {
            args: Prisma.TradeCommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>[]
          }
          create: {
            args: Prisma.TradeCommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>
          }
          createMany: {
            args: Prisma.TradeCommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TradeCommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>
          }
          update: {
            args: Prisma.TradeCommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>
          }
          deleteMany: {
            args: Prisma.TradeCommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TradeCommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TradeCommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TradeCommentPayload>
          }
          aggregate: {
            args: Prisma.TradeCommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTradeComment>
          }
          groupBy: {
            args: Prisma.TradeCommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TradeCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TradeCommentCountArgs<ExtArgs>,
            result: $Utils.Optional<TradeCommentCountAggregateOutputType> | number
          }
        }
      }
      History: {
        payload: Prisma.$HistoryPayload<ExtArgs>
        fields: Prisma.HistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findFirst: {
            args: Prisma.HistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findMany: {
            args: Prisma.HistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          create: {
            args: Prisma.HistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          createMany: {
            args: Prisma.HistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          update: {
            args: Prisma.HistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          deleteMany: {
            args: Prisma.HistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          aggregate: {
            args: Prisma.HistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistory>
          }
          groupBy: {
            args: Prisma.HistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<HistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    trade: number
    tradeComment: number
    likedTrade: number
    likedTradeComment: number
    tradeHistory: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trade?: boolean | UserCountOutputTypeCountTradeArgs
    tradeComment?: boolean | UserCountOutputTypeCountTradeCommentArgs
    likedTrade?: boolean | UserCountOutputTypeCountLikedTradeArgs
    likedTradeComment?: boolean | UserCountOutputTypeCountLikedTradeCommentArgs
    tradeHistory?: boolean | UserCountOutputTypeCountTradeHistoryArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikedTradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikedTradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTradeHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * Count Type TradeCountOutputType
   */

  export type TradeCountOutputType = {
    likedBy: number
    tradePicture: number
    tradeComment: number
  }

  export type TradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likedBy?: boolean | TradeCountOutputTypeCountLikedByArgs
    tradePicture?: boolean | TradeCountOutputTypeCountTradePictureArgs
    tradeComment?: boolean | TradeCountOutputTypeCountTradeCommentArgs
  }

  // Custom InputTypes
  /**
   * TradeCountOutputType without action
   */
  export type TradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCountOutputType
     */
    select?: TradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TradeCountOutputType without action
   */
  export type TradeCountOutputTypeCountLikedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TradeCountOutputType without action
   */
  export type TradeCountOutputTypeCountTradePictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradePictureWhereInput
  }

  /**
   * TradeCountOutputType without action
   */
  export type TradeCountOutputTypeCountTradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeCommentWhereInput
  }


  /**
   * Count Type TradeCommentCountOutputType
   */

  export type TradeCommentCountOutputType = {
    likedby: number
  }

  export type TradeCommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likedby?: boolean | TradeCommentCountOutputTypeCountLikedbyArgs
  }

  // Custom InputTypes
  /**
   * TradeCommentCountOutputType without action
   */
  export type TradeCommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeCommentCountOutputType
     */
    select?: TradeCommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TradeCommentCountOutputType without action
   */
  export type TradeCommentCountOutputTypeCountLikedbyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    manner: number | null
    age: number | null
    socialId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    manner: number | null
    age: number | null
    socialId: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    nickname: string | null
    password: string | null
    region: string | null
    manner: number | null
    age: number | null
    gender: $Enums.GenderType | null
    introduce: string | null
    socialId: bigint | null
    provider: $Enums.ProviderType | null
    role: $Enums.RoleType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    nickname: string | null
    password: string | null
    region: string | null
    manner: number | null
    age: number | null
    gender: $Enums.GenderType | null
    introduce: string | null
    socialId: bigint | null
    provider: $Enums.ProviderType | null
    role: $Enums.RoleType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    nickname: number
    password: number
    region: number
    manner: number
    age: number
    gender: number
    introduce: number
    socialId: number
    provider: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    manner?: true
    age?: true
    socialId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    manner?: true
    age?: true
    socialId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    nickname?: true
    password?: true
    region?: true
    manner?: true
    age?: true
    gender?: true
    introduce?: true
    socialId?: true
    provider?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    nickname?: true
    password?: true
    region?: true
    manner?: true
    age?: true
    gender?: true
    introduce?: true
    socialId?: true
    provider?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    nickname?: true
    password?: true
    region?: true
    manner?: true
    age?: true
    gender?: true
    introduce?: true
    socialId?: true
    provider?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    nickname: string
    password: string | null
    region: string | null
    manner: number
    age: number | null
    gender: $Enums.GenderType | null
    introduce: string | null
    socialId: bigint | null
    provider: $Enums.ProviderType
    role: $Enums.RoleType
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    nickname?: boolean
    password?: boolean
    region?: boolean
    manner?: boolean
    age?: boolean
    gender?: boolean
    introduce?: boolean
    socialId?: boolean
    provider?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    refreshToken?: boolean | User$refreshTokenArgs<ExtArgs>
    trade?: boolean | User$tradeArgs<ExtArgs>
    tradeComment?: boolean | User$tradeCommentArgs<ExtArgs>
    likedTrade?: boolean | User$likedTradeArgs<ExtArgs>
    likedTradeComment?: boolean | User$likedTradeCommentArgs<ExtArgs>
    tradeHistory?: boolean | User$tradeHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    nickname?: boolean
    password?: boolean
    region?: boolean
    manner?: boolean
    age?: boolean
    gender?: boolean
    introduce?: boolean
    socialId?: boolean
    provider?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "nickname" | "password" | "region" | "manner" | "age" | "gender" | "introduce" | "socialId" | "provider" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refreshToken?: boolean | User$refreshTokenArgs<ExtArgs>
    trade?: boolean | User$tradeArgs<ExtArgs>
    tradeComment?: boolean | User$tradeCommentArgs<ExtArgs>
    likedTrade?: boolean | User$likedTradeArgs<ExtArgs>
    likedTradeComment?: boolean | User$likedTradeCommentArgs<ExtArgs>
    tradeHistory?: boolean | User$tradeHistoryArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      refreshToken: Prisma.$RefreshTokenPayload<ExtArgs> | null
      trade: Prisma.$TradePayload<ExtArgs>[]
      tradeComment: Prisma.$TradeCommentPayload<ExtArgs>[]
      likedTrade: Prisma.$TradePayload<ExtArgs>[]
      likedTradeComment: Prisma.$TradeCommentPayload<ExtArgs>[]
      tradeHistory: Prisma.$HistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      nickname: string
      password: string | null
      region: string | null
      manner: number
      age: number | null
      gender: $Enums.GenderType | null
      introduce: string | null
      socialId: bigint | null
      provider: $Enums.ProviderType
      role: $Enums.RoleType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    refreshToken<T extends User$refreshTokenArgs<ExtArgs> = {}>(args?: Subset<T, User$refreshTokenArgs<ExtArgs>>): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    trade<T extends User$tradeArgs<ExtArgs> = {}>(args?: Subset<T, User$tradeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findMany'> | Null>;

    tradeComment<T extends User$tradeCommentArgs<ExtArgs> = {}>(args?: Subset<T, User$tradeCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    likedTrade<T extends User$likedTradeArgs<ExtArgs> = {}>(args?: Subset<T, User$likedTradeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findMany'> | Null>;

    likedTradeComment<T extends User$likedTradeCommentArgs<ExtArgs> = {}>(args?: Subset<T, User$likedTradeCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    tradeHistory<T extends User$tradeHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$tradeHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly region: FieldRef<"User", 'String'>
    readonly manner: FieldRef<"User", 'Float'>
    readonly age: FieldRef<"User", 'Int'>
    readonly gender: FieldRef<"User", 'GenderType'>
    readonly introduce: FieldRef<"User", 'String'>
    readonly socialId: FieldRef<"User", 'BigInt'>
    readonly provider: FieldRef<"User", 'ProviderType'>
    readonly role: FieldRef<"User", 'RoleType'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.refreshToken
   */
  export type User$refreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    where?: RefreshTokenWhereInput
  }

  /**
   * User.trade
   */
  export type User$tradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    cursor?: TradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * User.tradeComment
   */
  export type User$tradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    where?: TradeCommentWhereInput
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    cursor?: TradeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeCommentScalarFieldEnum | TradeCommentScalarFieldEnum[]
  }

  /**
   * User.likedTrade
   */
  export type User$likedTradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    cursor?: TradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * User.likedTradeComment
   */
  export type User$likedTradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    where?: TradeCommentWhereInput
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    cursor?: TradeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeCommentScalarFieldEnum | TradeCommentScalarFieldEnum[]
  }

  /**
   * User.tradeHistory
   */
  export type User$tradeHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model RefreshToken
   */

  export type AggregateRefreshToken = {
    _count: RefreshTokenCountAggregateOutputType | null
    _avg: RefreshTokenAvgAggregateOutputType | null
    _sum: RefreshTokenSumAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  export type RefreshTokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type RefreshTokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type RefreshTokenMinAggregateOutputType = {
    id: number | null
    userId: number | null
    refreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefreshTokenMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    refreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RefreshTokenCountAggregateOutputType = {
    id: number
    userId: number
    refreshToken: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RefreshTokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type RefreshTokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type RefreshTokenMinAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefreshTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RefreshTokenCountAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RefreshTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshToken to aggregate.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RefreshTokens
    **/
    _count?: true | RefreshTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefreshTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefreshTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefreshTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type GetRefreshTokenAggregateType<T extends RefreshTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateRefreshToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefreshToken[P]>
      : GetScalarType<T[P], AggregateRefreshToken[P]>
  }




  export type RefreshTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RefreshTokenWhereInput
    orderBy?: RefreshTokenOrderByWithAggregationInput | RefreshTokenOrderByWithAggregationInput[]
    by: RefreshTokenScalarFieldEnum[] | RefreshTokenScalarFieldEnum
    having?: RefreshTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefreshTokenCountAggregateInputType | true
    _avg?: RefreshTokenAvgAggregateInputType
    _sum?: RefreshTokenSumAggregateInputType
    _min?: RefreshTokenMinAggregateInputType
    _max?: RefreshTokenMaxAggregateInputType
  }

  export type RefreshTokenGroupByOutputType = {
    id: number
    userId: number
    refreshToken: string | null
    createdAt: Date
    updatedAt: Date
    _count: RefreshTokenCountAggregateOutputType | null
    _avg: RefreshTokenAvgAggregateOutputType | null
    _sum: RefreshTokenSumAggregateOutputType | null
    _min: RefreshTokenMinAggregateOutputType | null
    _max: RefreshTokenMaxAggregateOutputType | null
  }

  type GetRefreshTokenGroupByPayload<T extends RefreshTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefreshTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefreshTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
            : GetScalarType<T[P], RefreshTokenGroupByOutputType[P]>
        }
      >
    >


  export type RefreshTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refreshToken"]>

  export type RefreshTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RefreshTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "refreshToken" | "createdAt" | "updatedAt", ExtArgs["result"]["refreshToken"]>


  export type RefreshTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $RefreshTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RefreshToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      refreshToken: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["refreshToken"]>
    composites: {}
  }


  type RefreshTokenGetPayload<S extends boolean | null | undefined | RefreshTokenDefaultArgs> = $Result.GetResult<Prisma.$RefreshTokenPayload, S>

  type RefreshTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RefreshTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RefreshTokenCountAggregateInputType | true
    }

  export interface RefreshTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RefreshToken'], meta: { name: 'RefreshToken' } }
    /**
     * Find zero or one RefreshToken that matches the filter.
     * @param {RefreshTokenFindUniqueArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RefreshTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RefreshTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RefreshToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RefreshTokenFindUniqueOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RefreshTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RefreshTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RefreshTokenFindFirstArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RefreshToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindFirstOrThrowArgs} args - Arguments to find a RefreshToken
     * @example
     * // Get one RefreshToken
     * const refreshToken = await prisma.refreshToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RefreshTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RefreshTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RefreshTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany()
     * 
     * // Get first 10 RefreshTokens
     * const refreshTokens = await prisma.refreshToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refreshTokenWithIdOnly = await prisma.refreshToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RefreshTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RefreshTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RefreshToken.
     * @param {RefreshTokenCreateArgs} args - Arguments to create a RefreshToken.
     * @example
     * // Create one RefreshToken
     * const RefreshToken = await prisma.refreshToken.create({
     *   data: {
     *     // ... data to create a RefreshToken
     *   }
     * })
     * 
    **/
    create<T extends RefreshTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RefreshTokenCreateArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RefreshTokens.
     * @param {RefreshTokenCreateManyArgs} args - Arguments to create many RefreshTokens.
     * @example
     * // Create many RefreshTokens
     * const refreshToken = await prisma.refreshToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends RefreshTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RefreshTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RefreshToken.
     * @param {RefreshTokenDeleteArgs} args - Arguments to delete one RefreshToken.
     * @example
     * // Delete one RefreshToken
     * const RefreshToken = await prisma.refreshToken.delete({
     *   where: {
     *     // ... filter to delete one RefreshToken
     *   }
     * })
     * 
    **/
    delete<T extends RefreshTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RefreshTokenDeleteArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RefreshToken.
     * @param {RefreshTokenUpdateArgs} args - Arguments to update one RefreshToken.
     * @example
     * // Update one RefreshToken
     * const refreshToken = await prisma.refreshToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RefreshTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RefreshTokenUpdateArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RefreshTokens.
     * @param {RefreshTokenDeleteManyArgs} args - Arguments to filter RefreshTokens to delete.
     * @example
     * // Delete a few RefreshTokens
     * const { count } = await prisma.refreshToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RefreshTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RefreshTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RefreshTokens
     * const refreshToken = await prisma.refreshToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RefreshTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RefreshTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RefreshToken.
     * @param {RefreshTokenUpsertArgs} args - Arguments to update or create a RefreshToken.
     * @example
     * // Update or create a RefreshToken
     * const refreshToken = await prisma.refreshToken.upsert({
     *   create: {
     *     // ... data to create a RefreshToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RefreshToken we want to update
     *   }
     * })
    **/
    upsert<T extends RefreshTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RefreshTokenUpsertArgs<ExtArgs>>
    ): Prisma__RefreshTokenClient<$Result.GetResult<Prisma.$RefreshTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RefreshTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenCountArgs} args - Arguments to filter RefreshTokens to count.
     * @example
     * // Count the number of RefreshTokens
     * const count = await prisma.refreshToken.count({
     *   where: {
     *     // ... the filter for the RefreshTokens we want to count
     *   }
     * })
    **/
    count<T extends RefreshTokenCountArgs>(
      args?: Subset<T, RefreshTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefreshTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefreshTokenAggregateArgs>(args: Subset<T, RefreshTokenAggregateArgs>): Prisma.PrismaPromise<GetRefreshTokenAggregateType<T>>

    /**
     * Group by RefreshToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefreshTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RefreshTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RefreshTokenGroupByArgs['orderBy'] }
        : { orderBy?: RefreshTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RefreshTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefreshTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RefreshToken model
   */
  readonly fields: RefreshTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RefreshToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RefreshTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RefreshToken model
   */ 
  interface RefreshTokenFieldRefs {
    readonly id: FieldRef<"RefreshToken", 'Int'>
    readonly userId: FieldRef<"RefreshToken", 'Int'>
    readonly refreshToken: FieldRef<"RefreshToken", 'String'>
    readonly createdAt: FieldRef<"RefreshToken", 'DateTime'>
    readonly updatedAt: FieldRef<"RefreshToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RefreshToken findUnique
   */
  export type RefreshTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findUniqueOrThrow
   */
  export type RefreshTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken findFirst
   */
  export type RefreshTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findFirstOrThrow
   */
  export type RefreshTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshToken to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RefreshTokens.
     */
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken findMany
   */
  export type RefreshTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter, which RefreshTokens to fetch.
     */
    where?: RefreshTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RefreshTokens to fetch.
     */
    orderBy?: RefreshTokenOrderByWithRelationInput | RefreshTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RefreshTokens.
     */
    cursor?: RefreshTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RefreshTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RefreshTokens.
     */
    skip?: number
    distinct?: RefreshTokenScalarFieldEnum | RefreshTokenScalarFieldEnum[]
  }

  /**
   * RefreshToken create
   */
  export type RefreshTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a RefreshToken.
     */
    data: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
  }

  /**
   * RefreshToken createMany
   */
  export type RefreshTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RefreshTokens.
     */
    data: RefreshTokenCreateManyInput | RefreshTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RefreshToken update
   */
  export type RefreshTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a RefreshToken.
     */
    data: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
    /**
     * Choose, which RefreshToken to update.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken updateMany
   */
  export type RefreshTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RefreshTokens.
     */
    data: XOR<RefreshTokenUpdateManyMutationInput, RefreshTokenUncheckedUpdateManyInput>
    /**
     * Filter which RefreshTokens to update
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken upsert
   */
  export type RefreshTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the RefreshToken to update in case it exists.
     */
    where: RefreshTokenWhereUniqueInput
    /**
     * In case the RefreshToken found by the `where` argument doesn't exist, create a new RefreshToken with this data.
     */
    create: XOR<RefreshTokenCreateInput, RefreshTokenUncheckedCreateInput>
    /**
     * In case the RefreshToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RefreshTokenUpdateInput, RefreshTokenUncheckedUpdateInput>
  }

  /**
   * RefreshToken delete
   */
  export type RefreshTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
    /**
     * Filter which RefreshToken to delete.
     */
    where: RefreshTokenWhereUniqueInput
  }

  /**
   * RefreshToken deleteMany
   */
  export type RefreshTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RefreshTokens to delete
     */
    where?: RefreshTokenWhereInput
  }

  /**
   * RefreshToken without action
   */
  export type RefreshTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefreshToken
     */
    select?: RefreshTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RefreshToken
     */
    omit?: RefreshTokenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RefreshTokenInclude<ExtArgs> | null
  }


  /**
   * Model Trade
   */

  export type AggregateTrade = {
    _count: TradeCountAggregateOutputType | null
    _avg: TradeAvgAggregateOutputType | null
    _sum: TradeSumAggregateOutputType | null
    _min: TradeMinAggregateOutputType | null
    _max: TradeMaxAggregateOutputType | null
  }

  export type TradeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    price: number | null
    like: number | null
  }

  export type TradeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    price: number | null
    like: number | null
  }

  export type TradeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    content: string | null
    price: number | null
    region: string | null
    img: string | null
    like: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    content: string | null
    price: number | null
    region: string | null
    img: string | null
    like: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradeCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    content: number
    price: number
    region: number
    img: number
    like: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TradeAvgAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    like?: true
  }

  export type TradeSumAggregateInputType = {
    id?: true
    userId?: true
    price?: true
    like?: true
  }

  export type TradeMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    content?: true
    price?: true
    region?: true
    img?: true
    like?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradeMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    content?: true
    price?: true
    region?: true
    img?: true
    like?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradeCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    content?: true
    price?: true
    region?: true
    img?: true
    like?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trade to aggregate.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trades
    **/
    _count?: true | TradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeMaxAggregateInputType
  }

  export type GetTradeAggregateType<T extends TradeAggregateArgs> = {
        [P in keyof T & keyof AggregateTrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrade[P]>
      : GetScalarType<T[P], AggregateTrade[P]>
  }




  export type TradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeWhereInput
    orderBy?: TradeOrderByWithAggregationInput | TradeOrderByWithAggregationInput[]
    by: TradeScalarFieldEnum[] | TradeScalarFieldEnum
    having?: TradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeCountAggregateInputType | true
    _avg?: TradeAvgAggregateInputType
    _sum?: TradeSumAggregateInputType
    _min?: TradeMinAggregateInputType
    _max?: TradeMaxAggregateInputType
  }

  export type TradeGroupByOutputType = {
    id: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like: number
    createdAt: Date
    updatedAt: Date
    _count: TradeCountAggregateOutputType | null
    _avg: TradeAvgAggregateOutputType | null
    _sum: TradeSumAggregateOutputType | null
    _min: TradeMinAggregateOutputType | null
    _max: TradeMaxAggregateOutputType | null
  }

  type GetTradeGroupByPayload<T extends TradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeGroupByOutputType[P]>
            : GetScalarType<T[P], TradeGroupByOutputType[P]>
        }
      >
    >


  export type TradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    price?: boolean
    region?: boolean
    img?: boolean
    like?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    likedBy?: boolean | Trade$likedByArgs<ExtArgs>
    tradePicture?: boolean | Trade$tradePictureArgs<ExtArgs>
    tradeComment?: boolean | Trade$tradeCommentArgs<ExtArgs>
    tradeHistory?: boolean | Trade$tradeHistoryArgs<ExtArgs>
    _count?: boolean | TradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trade"]>

  export type TradeSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    price?: boolean
    region?: boolean
    img?: boolean
    like?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "content" | "price" | "region" | "img" | "like" | "createdAt" | "updatedAt", ExtArgs["result"]["trade"]>


  export type TradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    likedBy?: boolean | Trade$likedByArgs<ExtArgs>
    tradePicture?: boolean | Trade$tradePictureArgs<ExtArgs>
    tradeComment?: boolean | Trade$tradeCommentArgs<ExtArgs>
    tradeHistory?: boolean | Trade$tradeHistoryArgs<ExtArgs>
    _count?: boolean | TradeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trade"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      likedBy: Prisma.$UserPayload<ExtArgs>[]
      tradePicture: Prisma.$TradePicturePayload<ExtArgs>[]
      tradeComment: Prisma.$TradeCommentPayload<ExtArgs>[]
      tradeHistory: Prisma.$HistoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      content: string
      price: number
      region: string
      img: string
      like: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["trade"]>
    composites: {}
  }


  type TradeGetPayload<S extends boolean | null | undefined | TradeDefaultArgs> = $Result.GetResult<Prisma.$TradePayload, S>

  type TradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TradeCountAggregateInputType | true
    }

  export interface TradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trade'], meta: { name: 'Trade' } }
    /**
     * Find zero or one Trade that matches the filter.
     * @param {TradeFindUniqueArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TradeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TradeFindUniqueArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Trade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TradeFindUniqueOrThrowArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TradeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Trade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeFindFirstArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TradeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeFindFirstArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Trade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeFindFirstOrThrowArgs} args - Arguments to find a Trade
     * @example
     * // Get one Trade
     * const trade = await prisma.trade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TradeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Trades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trades
     * const trades = await prisma.trade.findMany()
     * 
     * // Get first 10 Trades
     * const trades = await prisma.trade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradeWithIdOnly = await prisma.trade.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TradeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Trade.
     * @param {TradeCreateArgs} args - Arguments to create a Trade.
     * @example
     * // Create one Trade
     * const Trade = await prisma.trade.create({
     *   data: {
     *     // ... data to create a Trade
     *   }
     * })
     * 
    **/
    create<T extends TradeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCreateArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Trades.
     * @param {TradeCreateManyArgs} args - Arguments to create many Trades.
     * @example
     * // Create many Trades
     * const trade = await prisma.trade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TradeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Trade.
     * @param {TradeDeleteArgs} args - Arguments to delete one Trade.
     * @example
     * // Delete one Trade
     * const Trade = await prisma.trade.delete({
     *   where: {
     *     // ... filter to delete one Trade
     *   }
     * })
     * 
    **/
    delete<T extends TradeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TradeDeleteArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Trade.
     * @param {TradeUpdateArgs} args - Arguments to update one Trade.
     * @example
     * // Update one Trade
     * const trade = await prisma.trade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TradeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TradeUpdateArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Trades.
     * @param {TradeDeleteManyArgs} args - Arguments to filter Trades to delete.
     * @example
     * // Delete a few Trades
     * const { count } = await prisma.trade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TradeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trades
     * const trade = await prisma.trade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TradeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TradeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trade.
     * @param {TradeUpsertArgs} args - Arguments to update or create a Trade.
     * @example
     * // Update or create a Trade
     * const trade = await prisma.trade.upsert({
     *   create: {
     *     // ... data to create a Trade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trade we want to update
     *   }
     * })
    **/
    upsert<T extends TradeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TradeUpsertArgs<ExtArgs>>
    ): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCountArgs} args - Arguments to filter Trades to count.
     * @example
     * // Count the number of Trades
     * const count = await prisma.trade.count({
     *   where: {
     *     // ... the filter for the Trades we want to count
     *   }
     * })
    **/
    count<T extends TradeCountArgs>(
      args?: Subset<T, TradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeAggregateArgs>(args: Subset<T, TradeAggregateArgs>): Prisma.PrismaPromise<GetTradeAggregateType<T>>

    /**
     * Group by Trade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeGroupByArgs['orderBy'] }
        : { orderBy?: TradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trade model
   */
  readonly fields: TradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    likedBy<T extends Trade$likedByArgs<ExtArgs> = {}>(args?: Subset<T, Trade$likedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    tradePicture<T extends Trade$tradePictureArgs<ExtArgs> = {}>(args?: Subset<T, Trade$tradePictureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'findMany'> | Null>;

    tradeComment<T extends Trade$tradeCommentArgs<ExtArgs> = {}>(args?: Subset<T, Trade$tradeCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    tradeHistory<T extends Trade$tradeHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Trade$tradeHistoryArgs<ExtArgs>>): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Trade model
   */ 
  interface TradeFieldRefs {
    readonly id: FieldRef<"Trade", 'Int'>
    readonly userId: FieldRef<"Trade", 'Int'>
    readonly title: FieldRef<"Trade", 'String'>
    readonly content: FieldRef<"Trade", 'String'>
    readonly price: FieldRef<"Trade", 'Int'>
    readonly region: FieldRef<"Trade", 'String'>
    readonly img: FieldRef<"Trade", 'String'>
    readonly like: FieldRef<"Trade", 'Int'>
    readonly createdAt: FieldRef<"Trade", 'DateTime'>
    readonly updatedAt: FieldRef<"Trade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Trade findUnique
   */
  export type TradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade findUniqueOrThrow
   */
  export type TradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade findFirst
   */
  export type TradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trades.
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trades.
     */
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Trade findFirstOrThrow
   */
  export type TradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trade to fetch.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trades.
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trades.
     */
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Trade findMany
   */
  export type TradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter, which Trades to fetch.
     */
    where?: TradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trades to fetch.
     */
    orderBy?: TradeOrderByWithRelationInput | TradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trades.
     */
    cursor?: TradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trades.
     */
    skip?: number
    distinct?: TradeScalarFieldEnum | TradeScalarFieldEnum[]
  }

  /**
   * Trade create
   */
  export type TradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Trade.
     */
    data: XOR<TradeCreateInput, TradeUncheckedCreateInput>
  }

  /**
   * Trade createMany
   */
  export type TradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trades.
     */
    data: TradeCreateManyInput | TradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trade update
   */
  export type TradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Trade.
     */
    data: XOR<TradeUpdateInput, TradeUncheckedUpdateInput>
    /**
     * Choose, which Trade to update.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade updateMany
   */
  export type TradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trades.
     */
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyInput>
    /**
     * Filter which Trades to update
     */
    where?: TradeWhereInput
  }

  /**
   * Trade upsert
   */
  export type TradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Trade to update in case it exists.
     */
    where: TradeWhereUniqueInput
    /**
     * In case the Trade found by the `where` argument doesn't exist, create a new Trade with this data.
     */
    create: XOR<TradeCreateInput, TradeUncheckedCreateInput>
    /**
     * In case the Trade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TradeUpdateInput, TradeUncheckedUpdateInput>
  }

  /**
   * Trade delete
   */
  export type TradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
    /**
     * Filter which Trade to delete.
     */
    where: TradeWhereUniqueInput
  }

  /**
   * Trade deleteMany
   */
  export type TradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trades to delete
     */
    where?: TradeWhereInput
  }

  /**
   * Trade.likedBy
   */
  export type Trade$likedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Trade.tradePicture
   */
  export type Trade$tradePictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    where?: TradePictureWhereInput
    orderBy?: TradePictureOrderByWithRelationInput | TradePictureOrderByWithRelationInput[]
    cursor?: TradePictureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradePictureScalarFieldEnum | TradePictureScalarFieldEnum[]
  }

  /**
   * Trade.tradeComment
   */
  export type Trade$tradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    where?: TradeCommentWhereInput
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    cursor?: TradeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TradeCommentScalarFieldEnum | TradeCommentScalarFieldEnum[]
  }

  /**
   * Trade.tradeHistory
   */
  export type Trade$tradeHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
  }

  /**
   * Trade without action
   */
  export type TradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trade
     */
    select?: TradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trade
     */
    omit?: TradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeInclude<ExtArgs> | null
  }


  /**
   * Model TradePicture
   */

  export type AggregateTradePicture = {
    _count: TradePictureCountAggregateOutputType | null
    _avg: TradePictureAvgAggregateOutputType | null
    _sum: TradePictureSumAggregateOutputType | null
    _min: TradePictureMinAggregateOutputType | null
    _max: TradePictureMaxAggregateOutputType | null
  }

  export type TradePictureAvgAggregateOutputType = {
    id: number | null
    tradeId: number | null
  }

  export type TradePictureSumAggregateOutputType = {
    id: number | null
    tradeId: number | null
  }

  export type TradePictureMinAggregateOutputType = {
    id: number | null
    tradeId: number | null
    imgUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradePictureMaxAggregateOutputType = {
    id: number | null
    tradeId: number | null
    imgUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradePictureCountAggregateOutputType = {
    id: number
    tradeId: number
    imgUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TradePictureAvgAggregateInputType = {
    id?: true
    tradeId?: true
  }

  export type TradePictureSumAggregateInputType = {
    id?: true
    tradeId?: true
  }

  export type TradePictureMinAggregateInputType = {
    id?: true
    tradeId?: true
    imgUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradePictureMaxAggregateInputType = {
    id?: true
    tradeId?: true
    imgUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradePictureCountAggregateInputType = {
    id?: true
    tradeId?: true
    imgUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TradePictureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradePicture to aggregate.
     */
    where?: TradePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradePictures to fetch.
     */
    orderBy?: TradePictureOrderByWithRelationInput | TradePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TradePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TradePictures
    **/
    _count?: true | TradePictureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradePictureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradePictureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradePictureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradePictureMaxAggregateInputType
  }

  export type GetTradePictureAggregateType<T extends TradePictureAggregateArgs> = {
        [P in keyof T & keyof AggregateTradePicture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradePicture[P]>
      : GetScalarType<T[P], AggregateTradePicture[P]>
  }




  export type TradePictureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradePictureWhereInput
    orderBy?: TradePictureOrderByWithAggregationInput | TradePictureOrderByWithAggregationInput[]
    by: TradePictureScalarFieldEnum[] | TradePictureScalarFieldEnum
    having?: TradePictureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradePictureCountAggregateInputType | true
    _avg?: TradePictureAvgAggregateInputType
    _sum?: TradePictureSumAggregateInputType
    _min?: TradePictureMinAggregateInputType
    _max?: TradePictureMaxAggregateInputType
  }

  export type TradePictureGroupByOutputType = {
    id: number
    tradeId: number
    imgUrl: string
    createdAt: Date
    updatedAt: Date
    _count: TradePictureCountAggregateOutputType | null
    _avg: TradePictureAvgAggregateOutputType | null
    _sum: TradePictureSumAggregateOutputType | null
    _min: TradePictureMinAggregateOutputType | null
    _max: TradePictureMaxAggregateOutputType | null
  }

  type GetTradePictureGroupByPayload<T extends TradePictureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradePictureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradePictureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradePictureGroupByOutputType[P]>
            : GetScalarType<T[P], TradePictureGroupByOutputType[P]>
        }
      >
    >


  export type TradePictureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    imgUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tradePicture"]>

  export type TradePictureSelectScalar = {
    id?: boolean
    tradeId?: boolean
    imgUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TradePictureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tradeId" | "imgUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["tradePicture"]>


  export type TradePictureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }


  export type $TradePicturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TradePicture"
    objects: {
      trade: Prisma.$TradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tradeId: number
      imgUrl: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tradePicture"]>
    composites: {}
  }


  type TradePictureGetPayload<S extends boolean | null | undefined | TradePictureDefaultArgs> = $Result.GetResult<Prisma.$TradePicturePayload, S>

  type TradePictureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TradePictureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TradePictureCountAggregateInputType | true
    }

  export interface TradePictureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TradePicture'], meta: { name: 'TradePicture' } }
    /**
     * Find zero or one TradePicture that matches the filter.
     * @param {TradePictureFindUniqueArgs} args - Arguments to find a TradePicture
     * @example
     * // Get one TradePicture
     * const tradePicture = await prisma.tradePicture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TradePictureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TradePictureFindUniqueArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TradePicture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TradePictureFindUniqueOrThrowArgs} args - Arguments to find a TradePicture
     * @example
     * // Get one TradePicture
     * const tradePicture = await prisma.tradePicture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TradePictureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TradePictureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TradePicture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureFindFirstArgs} args - Arguments to find a TradePicture
     * @example
     * // Get one TradePicture
     * const tradePicture = await prisma.tradePicture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TradePictureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TradePictureFindFirstArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TradePicture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureFindFirstOrThrowArgs} args - Arguments to find a TradePicture
     * @example
     * // Get one TradePicture
     * const tradePicture = await prisma.tradePicture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TradePictureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TradePictureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TradePictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradePictures
     * const tradePictures = await prisma.tradePicture.findMany()
     * 
     * // Get first 10 TradePictures
     * const tradePictures = await prisma.tradePicture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradePictureWithIdOnly = await prisma.tradePicture.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TradePictureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradePictureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TradePicture.
     * @param {TradePictureCreateArgs} args - Arguments to create a TradePicture.
     * @example
     * // Create one TradePicture
     * const TradePicture = await prisma.tradePicture.create({
     *   data: {
     *     // ... data to create a TradePicture
     *   }
     * })
     * 
    **/
    create<T extends TradePictureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TradePictureCreateArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TradePictures.
     * @param {TradePictureCreateManyArgs} args - Arguments to create many TradePictures.
     * @example
     * // Create many TradePictures
     * const tradePicture = await prisma.tradePicture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TradePictureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradePictureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TradePicture.
     * @param {TradePictureDeleteArgs} args - Arguments to delete one TradePicture.
     * @example
     * // Delete one TradePicture
     * const TradePicture = await prisma.tradePicture.delete({
     *   where: {
     *     // ... filter to delete one TradePicture
     *   }
     * })
     * 
    **/
    delete<T extends TradePictureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TradePictureDeleteArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TradePicture.
     * @param {TradePictureUpdateArgs} args - Arguments to update one TradePicture.
     * @example
     * // Update one TradePicture
     * const tradePicture = await prisma.tradePicture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TradePictureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TradePictureUpdateArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TradePictures.
     * @param {TradePictureDeleteManyArgs} args - Arguments to filter TradePictures to delete.
     * @example
     * // Delete a few TradePictures
     * const { count } = await prisma.tradePicture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TradePictureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradePictureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradePictures
     * const tradePicture = await prisma.tradePicture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TradePictureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TradePictureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TradePicture.
     * @param {TradePictureUpsertArgs} args - Arguments to update or create a TradePicture.
     * @example
     * // Update or create a TradePicture
     * const tradePicture = await prisma.tradePicture.upsert({
     *   create: {
     *     // ... data to create a TradePicture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradePicture we want to update
     *   }
     * })
    **/
    upsert<T extends TradePictureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TradePictureUpsertArgs<ExtArgs>>
    ): Prisma__TradePictureClient<$Result.GetResult<Prisma.$TradePicturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TradePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureCountArgs} args - Arguments to filter TradePictures to count.
     * @example
     * // Count the number of TradePictures
     * const count = await prisma.tradePicture.count({
     *   where: {
     *     // ... the filter for the TradePictures we want to count
     *   }
     * })
    **/
    count<T extends TradePictureCountArgs>(
      args?: Subset<T, TradePictureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradePictureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradePictureAggregateArgs>(args: Subset<T, TradePictureAggregateArgs>): Prisma.PrismaPromise<GetTradePictureAggregateType<T>>

    /**
     * Group by TradePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradePictureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradePictureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradePictureGroupByArgs['orderBy'] }
        : { orderBy?: TradePictureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradePictureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradePictureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TradePicture model
   */
  readonly fields: TradePictureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TradePicture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TradePictureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    trade<T extends TradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TradeDefaultArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TradePicture model
   */ 
  interface TradePictureFieldRefs {
    readonly id: FieldRef<"TradePicture", 'Int'>
    readonly tradeId: FieldRef<"TradePicture", 'Int'>
    readonly imgUrl: FieldRef<"TradePicture", 'String'>
    readonly createdAt: FieldRef<"TradePicture", 'DateTime'>
    readonly updatedAt: FieldRef<"TradePicture", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TradePicture findUnique
   */
  export type TradePictureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * Filter, which TradePicture to fetch.
     */
    where: TradePictureWhereUniqueInput
  }

  /**
   * TradePicture findUniqueOrThrow
   */
  export type TradePictureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * Filter, which TradePicture to fetch.
     */
    where: TradePictureWhereUniqueInput
  }

  /**
   * TradePicture findFirst
   */
  export type TradePictureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * Filter, which TradePicture to fetch.
     */
    where?: TradePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradePictures to fetch.
     */
    orderBy?: TradePictureOrderByWithRelationInput | TradePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradePictures.
     */
    cursor?: TradePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradePictures.
     */
    distinct?: TradePictureScalarFieldEnum | TradePictureScalarFieldEnum[]
  }

  /**
   * TradePicture findFirstOrThrow
   */
  export type TradePictureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * Filter, which TradePicture to fetch.
     */
    where?: TradePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradePictures to fetch.
     */
    orderBy?: TradePictureOrderByWithRelationInput | TradePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradePictures.
     */
    cursor?: TradePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradePictures.
     */
    distinct?: TradePictureScalarFieldEnum | TradePictureScalarFieldEnum[]
  }

  /**
   * TradePicture findMany
   */
  export type TradePictureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * Filter, which TradePictures to fetch.
     */
    where?: TradePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradePictures to fetch.
     */
    orderBy?: TradePictureOrderByWithRelationInput | TradePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TradePictures.
     */
    cursor?: TradePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradePictures.
     */
    skip?: number
    distinct?: TradePictureScalarFieldEnum | TradePictureScalarFieldEnum[]
  }

  /**
   * TradePicture create
   */
  export type TradePictureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * The data needed to create a TradePicture.
     */
    data: XOR<TradePictureCreateInput, TradePictureUncheckedCreateInput>
  }

  /**
   * TradePicture createMany
   */
  export type TradePictureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TradePictures.
     */
    data: TradePictureCreateManyInput | TradePictureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TradePicture update
   */
  export type TradePictureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * The data needed to update a TradePicture.
     */
    data: XOR<TradePictureUpdateInput, TradePictureUncheckedUpdateInput>
    /**
     * Choose, which TradePicture to update.
     */
    where: TradePictureWhereUniqueInput
  }

  /**
   * TradePicture updateMany
   */
  export type TradePictureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TradePictures.
     */
    data: XOR<TradePictureUpdateManyMutationInput, TradePictureUncheckedUpdateManyInput>
    /**
     * Filter which TradePictures to update
     */
    where?: TradePictureWhereInput
  }

  /**
   * TradePicture upsert
   */
  export type TradePictureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * The filter to search for the TradePicture to update in case it exists.
     */
    where: TradePictureWhereUniqueInput
    /**
     * In case the TradePicture found by the `where` argument doesn't exist, create a new TradePicture with this data.
     */
    create: XOR<TradePictureCreateInput, TradePictureUncheckedCreateInput>
    /**
     * In case the TradePicture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TradePictureUpdateInput, TradePictureUncheckedUpdateInput>
  }

  /**
   * TradePicture delete
   */
  export type TradePictureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
    /**
     * Filter which TradePicture to delete.
     */
    where: TradePictureWhereUniqueInput
  }

  /**
   * TradePicture deleteMany
   */
  export type TradePictureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradePictures to delete
     */
    where?: TradePictureWhereInput
  }

  /**
   * TradePicture without action
   */
  export type TradePictureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradePicture
     */
    select?: TradePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradePicture
     */
    omit?: TradePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradePictureInclude<ExtArgs> | null
  }


  /**
   * Model TradeComment
   */

  export type AggregateTradeComment = {
    _count: TradeCommentCountAggregateOutputType | null
    _avg: TradeCommentAvgAggregateOutputType | null
    _sum: TradeCommentSumAggregateOutputType | null
    _min: TradeCommentMinAggregateOutputType | null
    _max: TradeCommentMaxAggregateOutputType | null
  }

  export type TradeCommentAvgAggregateOutputType = {
    id: number | null
    tradeId: number | null
    userId: number | null
    like: number | null
  }

  export type TradeCommentSumAggregateOutputType = {
    id: number | null
    tradeId: number | null
    userId: number | null
    like: number | null
  }

  export type TradeCommentMinAggregateOutputType = {
    id: number | null
    tradeId: number | null
    userId: number | null
    comment: string | null
    like: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradeCommentMaxAggregateOutputType = {
    id: number | null
    tradeId: number | null
    userId: number | null
    comment: string | null
    like: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TradeCommentCountAggregateOutputType = {
    id: number
    tradeId: number
    userId: number
    comment: number
    like: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TradeCommentAvgAggregateInputType = {
    id?: true
    tradeId?: true
    userId?: true
    like?: true
  }

  export type TradeCommentSumAggregateInputType = {
    id?: true
    tradeId?: true
    userId?: true
    like?: true
  }

  export type TradeCommentMinAggregateInputType = {
    id?: true
    tradeId?: true
    userId?: true
    comment?: true
    like?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradeCommentMaxAggregateInputType = {
    id?: true
    tradeId?: true
    userId?: true
    comment?: true
    like?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TradeCommentCountAggregateInputType = {
    id?: true
    tradeId?: true
    userId?: true
    comment?: true
    like?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TradeCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradeComment to aggregate.
     */
    where?: TradeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeComments to fetch.
     */
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TradeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TradeComments
    **/
    _count?: true | TradeCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradeCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradeCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradeCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradeCommentMaxAggregateInputType
  }

  export type GetTradeCommentAggregateType<T extends TradeCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateTradeComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTradeComment[P]>
      : GetScalarType<T[P], AggregateTradeComment[P]>
  }




  export type TradeCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TradeCommentWhereInput
    orderBy?: TradeCommentOrderByWithAggregationInput | TradeCommentOrderByWithAggregationInput[]
    by: TradeCommentScalarFieldEnum[] | TradeCommentScalarFieldEnum
    having?: TradeCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradeCommentCountAggregateInputType | true
    _avg?: TradeCommentAvgAggregateInputType
    _sum?: TradeCommentSumAggregateInputType
    _min?: TradeCommentMinAggregateInputType
    _max?: TradeCommentMaxAggregateInputType
  }

  export type TradeCommentGroupByOutputType = {
    id: number
    tradeId: number
    userId: number
    comment: string
    like: number
    createdAt: Date
    updatedAt: Date
    _count: TradeCommentCountAggregateOutputType | null
    _avg: TradeCommentAvgAggregateOutputType | null
    _sum: TradeCommentSumAggregateOutputType | null
    _min: TradeCommentMinAggregateOutputType | null
    _max: TradeCommentMaxAggregateOutputType | null
  }

  type GetTradeCommentGroupByPayload<T extends TradeCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradeCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradeCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradeCommentGroupByOutputType[P]>
            : GetScalarType<T[P], TradeCommentGroupByOutputType[P]>
        }
      >
    >


  export type TradeCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tradeId?: boolean
    userId?: boolean
    comment?: boolean
    like?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    likedby?: boolean | TradeComment$likedbyArgs<ExtArgs>
    trade?: boolean | TradeDefaultArgs<ExtArgs>
    _count?: boolean | TradeCommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tradeComment"]>

  export type TradeCommentSelectScalar = {
    id?: boolean
    tradeId?: boolean
    userId?: boolean
    comment?: boolean
    like?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TradeCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tradeId" | "userId" | "comment" | "like" | "createdAt" | "updatedAt", ExtArgs["result"]["tradeComment"]>


  export type TradeCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    likedby?: boolean | TradeComment$likedbyArgs<ExtArgs>
    trade?: boolean | TradeDefaultArgs<ExtArgs>
    _count?: boolean | TradeCommentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TradeCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TradeComment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      likedby: Prisma.$UserPayload<ExtArgs>[]
      trade: Prisma.$TradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tradeId: number
      userId: number
      comment: string
      like: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tradeComment"]>
    composites: {}
  }


  type TradeCommentGetPayload<S extends boolean | null | undefined | TradeCommentDefaultArgs> = $Result.GetResult<Prisma.$TradeCommentPayload, S>

  type TradeCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TradeCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TradeCommentCountAggregateInputType | true
    }

  export interface TradeCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TradeComment'], meta: { name: 'TradeComment' } }
    /**
     * Find zero or one TradeComment that matches the filter.
     * @param {TradeCommentFindUniqueArgs} args - Arguments to find a TradeComment
     * @example
     * // Get one TradeComment
     * const tradeComment = await prisma.tradeComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TradeCommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCommentFindUniqueArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TradeComment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TradeCommentFindUniqueOrThrowArgs} args - Arguments to find a TradeComment
     * @example
     * // Get one TradeComment
     * const tradeComment = await prisma.tradeComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TradeCommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TradeComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentFindFirstArgs} args - Arguments to find a TradeComment
     * @example
     * // Get one TradeComment
     * const tradeComment = await prisma.tradeComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TradeCommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCommentFindFirstArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TradeComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentFindFirstOrThrowArgs} args - Arguments to find a TradeComment
     * @example
     * // Get one TradeComment
     * const tradeComment = await prisma.tradeComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TradeCommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TradeComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TradeComments
     * const tradeComments = await prisma.tradeComment.findMany()
     * 
     * // Get first 10 TradeComments
     * const tradeComments = await prisma.tradeComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradeCommentWithIdOnly = await prisma.tradeComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TradeCommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TradeComment.
     * @param {TradeCommentCreateArgs} args - Arguments to create a TradeComment.
     * @example
     * // Create one TradeComment
     * const TradeComment = await prisma.tradeComment.create({
     *   data: {
     *     // ... data to create a TradeComment
     *   }
     * })
     * 
    **/
    create<T extends TradeCommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCommentCreateArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many TradeComments.
     * @param {TradeCommentCreateManyArgs} args - Arguments to create many TradeComments.
     * @example
     * // Create many TradeComments
     * const tradeComment = await prisma.tradeComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TradeCommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TradeComment.
     * @param {TradeCommentDeleteArgs} args - Arguments to delete one TradeComment.
     * @example
     * // Delete one TradeComment
     * const TradeComment = await prisma.tradeComment.delete({
     *   where: {
     *     // ... filter to delete one TradeComment
     *   }
     * })
     * 
    **/
    delete<T extends TradeCommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCommentDeleteArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TradeComment.
     * @param {TradeCommentUpdateArgs} args - Arguments to update one TradeComment.
     * @example
     * // Update one TradeComment
     * const tradeComment = await prisma.tradeComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TradeCommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCommentUpdateArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TradeComments.
     * @param {TradeCommentDeleteManyArgs} args - Arguments to filter TradeComments to delete.
     * @example
     * // Delete a few TradeComments
     * const { count } = await prisma.tradeComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TradeCommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TradeCommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TradeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TradeComments
     * const tradeComment = await prisma.tradeComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TradeCommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TradeComment.
     * @param {TradeCommentUpsertArgs} args - Arguments to update or create a TradeComment.
     * @example
     * // Update or create a TradeComment
     * const tradeComment = await prisma.tradeComment.upsert({
     *   create: {
     *     // ... data to create a TradeComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TradeComment we want to update
     *   }
     * })
    **/
    upsert<T extends TradeCommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TradeCommentUpsertArgs<ExtArgs>>
    ): Prisma__TradeCommentClient<$Result.GetResult<Prisma.$TradeCommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TradeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentCountArgs} args - Arguments to filter TradeComments to count.
     * @example
     * // Count the number of TradeComments
     * const count = await prisma.tradeComment.count({
     *   where: {
     *     // ... the filter for the TradeComments we want to count
     *   }
     * })
    **/
    count<T extends TradeCommentCountArgs>(
      args?: Subset<T, TradeCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradeCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TradeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradeCommentAggregateArgs>(args: Subset<T, TradeCommentAggregateArgs>): Prisma.PrismaPromise<GetTradeCommentAggregateType<T>>

    /**
     * Group by TradeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradeCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TradeCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TradeCommentGroupByArgs['orderBy'] }
        : { orderBy?: TradeCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TradeCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradeCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TradeComment model
   */
  readonly fields: TradeCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TradeComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TradeCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    likedby<T extends TradeComment$likedbyArgs<ExtArgs> = {}>(args?: Subset<T, TradeComment$likedbyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    trade<T extends TradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TradeDefaultArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the TradeComment model
   */ 
  interface TradeCommentFieldRefs {
    readonly id: FieldRef<"TradeComment", 'Int'>
    readonly tradeId: FieldRef<"TradeComment", 'Int'>
    readonly userId: FieldRef<"TradeComment", 'Int'>
    readonly comment: FieldRef<"TradeComment", 'String'>
    readonly like: FieldRef<"TradeComment", 'Int'>
    readonly createdAt: FieldRef<"TradeComment", 'DateTime'>
    readonly updatedAt: FieldRef<"TradeComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TradeComment findUnique
   */
  export type TradeCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * Filter, which TradeComment to fetch.
     */
    where: TradeCommentWhereUniqueInput
  }

  /**
   * TradeComment findUniqueOrThrow
   */
  export type TradeCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * Filter, which TradeComment to fetch.
     */
    where: TradeCommentWhereUniqueInput
  }

  /**
   * TradeComment findFirst
   */
  export type TradeCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * Filter, which TradeComment to fetch.
     */
    where?: TradeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeComments to fetch.
     */
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradeComments.
     */
    cursor?: TradeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradeComments.
     */
    distinct?: TradeCommentScalarFieldEnum | TradeCommentScalarFieldEnum[]
  }

  /**
   * TradeComment findFirstOrThrow
   */
  export type TradeCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * Filter, which TradeComment to fetch.
     */
    where?: TradeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeComments to fetch.
     */
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TradeComments.
     */
    cursor?: TradeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TradeComments.
     */
    distinct?: TradeCommentScalarFieldEnum | TradeCommentScalarFieldEnum[]
  }

  /**
   * TradeComment findMany
   */
  export type TradeCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * Filter, which TradeComments to fetch.
     */
    where?: TradeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TradeComments to fetch.
     */
    orderBy?: TradeCommentOrderByWithRelationInput | TradeCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TradeComments.
     */
    cursor?: TradeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TradeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TradeComments.
     */
    skip?: number
    distinct?: TradeCommentScalarFieldEnum | TradeCommentScalarFieldEnum[]
  }

  /**
   * TradeComment create
   */
  export type TradeCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a TradeComment.
     */
    data: XOR<TradeCommentCreateInput, TradeCommentUncheckedCreateInput>
  }

  /**
   * TradeComment createMany
   */
  export type TradeCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TradeComments.
     */
    data: TradeCommentCreateManyInput | TradeCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TradeComment update
   */
  export type TradeCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a TradeComment.
     */
    data: XOR<TradeCommentUpdateInput, TradeCommentUncheckedUpdateInput>
    /**
     * Choose, which TradeComment to update.
     */
    where: TradeCommentWhereUniqueInput
  }

  /**
   * TradeComment updateMany
   */
  export type TradeCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TradeComments.
     */
    data: XOR<TradeCommentUpdateManyMutationInput, TradeCommentUncheckedUpdateManyInput>
    /**
     * Filter which TradeComments to update
     */
    where?: TradeCommentWhereInput
  }

  /**
   * TradeComment upsert
   */
  export type TradeCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the TradeComment to update in case it exists.
     */
    where: TradeCommentWhereUniqueInput
    /**
     * In case the TradeComment found by the `where` argument doesn't exist, create a new TradeComment with this data.
     */
    create: XOR<TradeCommentCreateInput, TradeCommentUncheckedCreateInput>
    /**
     * In case the TradeComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TradeCommentUpdateInput, TradeCommentUncheckedUpdateInput>
  }

  /**
   * TradeComment delete
   */
  export type TradeCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
    /**
     * Filter which TradeComment to delete.
     */
    where: TradeCommentWhereUniqueInput
  }

  /**
   * TradeComment deleteMany
   */
  export type TradeCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TradeComments to delete
     */
    where?: TradeCommentWhereInput
  }

  /**
   * TradeComment.likedby
   */
  export type TradeComment$likedbyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * TradeComment without action
   */
  export type TradeCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TradeComment
     */
    select?: TradeCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TradeComment
     */
    omit?: TradeCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TradeCommentInclude<ExtArgs> | null
  }


  /**
   * Model History
   */

  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    tradeId: number | null
  }

  export type HistorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    tradeId: number | null
  }

  export type HistoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    tradeId: number | null
    type: $Enums.TradeType | null
  }

  export type HistoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    tradeId: number | null
    type: $Enums.TradeType | null
  }

  export type HistoryCountAggregateOutputType = {
    id: number
    userId: number
    tradeId: number
    type: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
  }

  export type HistorySumAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
  }

  export type HistoryMinAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
    type?: true
  }

  export type HistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
    type?: true
  }

  export type HistoryCountAggregateInputType = {
    id?: true
    userId?: true
    tradeId?: true
    type?: true
    _all?: true
  }

  export type HistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History to aggregate.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type HistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithAggregationInput | HistoryOrderByWithAggregationInput[]
    by: HistoryScalarFieldEnum[] | HistoryScalarFieldEnum
    having?: HistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }

  export type HistoryGroupByOutputType = {
    id: number
    userId: number
    tradeId: number
    type: $Enums.TradeType
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type HistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tradeId?: boolean
    type?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectScalar = {
    id?: boolean
    userId?: boolean
    tradeId?: boolean
    type?: boolean
  }

  export type HistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "tradeId" | "type", ExtArgs["result"]["history"]>


  export type HistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    trade?: boolean | TradeDefaultArgs<ExtArgs>
  }


  export type $HistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      trade: Prisma.$TradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      tradeId: number
      type: $Enums.TradeType
    }, ExtArgs["result"]["history"]>
    composites: {}
  }


  type HistoryGetPayload<S extends boolean | null | undefined | HistoryDefaultArgs> = $Result.GetResult<Prisma.$HistoryPayload, S>

  type HistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface HistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History'], meta: { name: 'History' } }
    /**
     * Find zero or one History that matches the filter.
     * @param {HistoryFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one History that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HistoryFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first History that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historyWithIdOnly = await prisma.history.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a History.
     * @param {HistoryCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends HistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryCreateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Histories.
     * @param {HistoryCreateManyArgs} args - Arguments to create many Histories.
     * @example
     * // Create many Histories
     * const history = await prisma.history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends HistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {HistoryDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends HistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryDeleteArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one History.
     * @param {HistoryUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Histories.
     * @param {HistoryDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {HistoryUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends HistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpsertArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends HistoryCountArgs>(
      args?: Subset<T, HistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History model
   */
  readonly fields: HistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    trade<T extends TradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TradeDefaultArgs<ExtArgs>>): Prisma__TradeClient<$Result.GetResult<Prisma.$TradePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the History model
   */ 
  interface HistoryFieldRefs {
    readonly id: FieldRef<"History", 'Int'>
    readonly userId: FieldRef<"History", 'Int'>
    readonly tradeId: FieldRef<"History", 'Int'>
    readonly type: FieldRef<"History", 'TradeType'>
  }
    

  // Custom InputTypes
  /**
   * History findUnique
   */
  export type HistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History findUniqueOrThrow
   */
  export type HistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History findFirst
   */
  export type HistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * History findFirstOrThrow
   */
  export type HistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * History findMany
   */
  export type HistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which Histories to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }

  /**
   * History create
   */
  export type HistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a History.
     */
    data: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
  }

  /**
   * History createMany
   */
  export type HistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Histories.
     */
    data: HistoryCreateManyInput | HistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * History update
   */
  export type HistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a History.
     */
    data: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
    /**
     * Choose, which History to update.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History updateMany
   */
  export type HistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
  }

  /**
   * History upsert
   */
  export type HistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the History to update in case it exists.
     */
    where: HistoryWhereUniqueInput
    /**
     * In case the History found by the `where` argument doesn't exist, create a new History with this data.
     */
    create: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
    /**
     * In case the History was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
  }

  /**
   * History delete
   */
  export type HistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter which History to delete.
     */
    where: HistoryWhereUniqueInput
  }

  /**
   * History deleteMany
   */
  export type HistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Histories to delete
     */
    where?: HistoryWhereInput
  }

  /**
   * History without action
   */
  export type HistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the History
     */
    omit?: HistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    nickname: 'nickname',
    password: 'password',
    region: 'region',
    manner: 'manner',
    age: 'age',
    gender: 'gender',
    introduce: 'introduce',
    socialId: 'socialId',
    provider: 'provider',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RefreshTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    refreshToken: 'refreshToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


  export const TradeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    content: 'content',
    price: 'price',
    region: 'region',
    img: 'img',
    like: 'like',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TradeScalarFieldEnum = (typeof TradeScalarFieldEnum)[keyof typeof TradeScalarFieldEnum]


  export const TradePictureScalarFieldEnum: {
    id: 'id',
    tradeId: 'tradeId',
    imgUrl: 'imgUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TradePictureScalarFieldEnum = (typeof TradePictureScalarFieldEnum)[keyof typeof TradePictureScalarFieldEnum]


  export const TradeCommentScalarFieldEnum: {
    id: 'id',
    tradeId: 'tradeId',
    userId: 'userId',
    comment: 'comment',
    like: 'like',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TradeCommentScalarFieldEnum = (typeof TradeCommentScalarFieldEnum)[keyof typeof TradeCommentScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tradeId: 'tradeId',
    type: 'type'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'GenderType'
   */
  export type EnumGenderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GenderType'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'ProviderType'
   */
  export type EnumProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProviderType'>
    


  /**
   * Reference to a field of type 'RoleType'
   */
  export type EnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleType'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'TradeType'
   */
  export type EnumTradeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TradeType'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    nickname?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    region?: StringNullableFilter<"User"> | string | null
    manner?: FloatFilter<"User"> | number
    age?: IntNullableFilter<"User"> | number | null
    gender?: EnumGenderTypeNullableFilter<"User"> | $Enums.GenderType | null
    introduce?: StringNullableFilter<"User"> | string | null
    socialId?: BigIntNullableFilter<"User"> | bigint | number | null
    provider?: EnumProviderTypeFilter<"User"> | $Enums.ProviderType
    role?: EnumRoleTypeFilter<"User"> | $Enums.RoleType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    refreshToken?: XOR<RefreshTokenNullableRelationFilter, RefreshTokenWhereInput> | null
    trade?: TradeListRelationFilter
    tradeComment?: TradeCommentListRelationFilter
    likedTrade?: TradeListRelationFilter
    likedTradeComment?: TradeCommentListRelationFilter
    tradeHistory?: HistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    password?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    manner?: SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    introduce?: SortOrderInput | SortOrder
    socialId?: SortOrderInput | SortOrder
    provider?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    refreshToken?: RefreshTokenOrderByWithRelationInput
    trade?: TradeOrderByRelationAggregateInput
    tradeComment?: TradeCommentOrderByRelationAggregateInput
    likedTrade?: TradeOrderByRelationAggregateInput
    likedTradeComment?: TradeCommentOrderByRelationAggregateInput
    tradeHistory?: HistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    nickname?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    region?: StringNullableFilter<"User"> | string | null
    manner?: FloatFilter<"User"> | number
    age?: IntNullableFilter<"User"> | number | null
    gender?: EnumGenderTypeNullableFilter<"User"> | $Enums.GenderType | null
    introduce?: StringNullableFilter<"User"> | string | null
    socialId?: BigIntNullableFilter<"User"> | bigint | number | null
    provider?: EnumProviderTypeFilter<"User"> | $Enums.ProviderType
    role?: EnumRoleTypeFilter<"User"> | $Enums.RoleType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    refreshToken?: XOR<RefreshTokenNullableRelationFilter, RefreshTokenWhereInput> | null
    trade?: TradeListRelationFilter
    tradeComment?: TradeCommentListRelationFilter
    likedTrade?: TradeListRelationFilter
    likedTradeComment?: TradeCommentListRelationFilter
    tradeHistory?: HistoryListRelationFilter
  }, "id" | "email" | "nickname">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    password?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    manner?: SortOrder
    age?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    introduce?: SortOrderInput | SortOrder
    socialId?: SortOrderInput | SortOrder
    provider?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    nickname?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    region?: StringNullableWithAggregatesFilter<"User"> | string | null
    manner?: FloatWithAggregatesFilter<"User"> | number
    age?: IntNullableWithAggregatesFilter<"User"> | number | null
    gender?: EnumGenderTypeNullableWithAggregatesFilter<"User"> | $Enums.GenderType | null
    introduce?: StringNullableWithAggregatesFilter<"User"> | string | null
    socialId?: BigIntNullableWithAggregatesFilter<"User"> | bigint | number | null
    provider?: EnumProviderTypeWithAggregatesFilter<"User"> | $Enums.ProviderType
    role?: EnumRoleTypeWithAggregatesFilter<"User"> | $Enums.RoleType
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RefreshTokenWhereInput = {
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    id?: IntFilter<"RefreshToken"> | number
    userId?: IntFilter<"RefreshToken"> | number
    refreshToken?: StringNullableFilter<"RefreshToken"> | string | null
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    updatedAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RefreshTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RefreshTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    OR?: RefreshTokenWhereInput[]
    NOT?: RefreshTokenWhereInput | RefreshTokenWhereInput[]
    refreshToken?: StringNullableFilter<"RefreshToken"> | string | null
    createdAt?: DateTimeFilter<"RefreshToken"> | Date | string
    updatedAt?: DateTimeFilter<"RefreshToken"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type RefreshTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RefreshTokenCountOrderByAggregateInput
    _avg?: RefreshTokenAvgOrderByAggregateInput
    _max?: RefreshTokenMaxOrderByAggregateInput
    _min?: RefreshTokenMinOrderByAggregateInput
    _sum?: RefreshTokenSumOrderByAggregateInput
  }

  export type RefreshTokenScalarWhereWithAggregatesInput = {
    AND?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    OR?: RefreshTokenScalarWhereWithAggregatesInput[]
    NOT?: RefreshTokenScalarWhereWithAggregatesInput | RefreshTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RefreshToken"> | number
    userId?: IntWithAggregatesFilter<"RefreshToken"> | number
    refreshToken?: StringNullableWithAggregatesFilter<"RefreshToken"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RefreshToken"> | Date | string
  }

  export type TradeWhereInput = {
    AND?: TradeWhereInput | TradeWhereInput[]
    OR?: TradeWhereInput[]
    NOT?: TradeWhereInput | TradeWhereInput[]
    id?: IntFilter<"Trade"> | number
    userId?: IntFilter<"Trade"> | number
    title?: StringFilter<"Trade"> | string
    content?: StringFilter<"Trade"> | string
    price?: IntFilter<"Trade"> | number
    region?: StringFilter<"Trade"> | string
    img?: StringFilter<"Trade"> | string
    like?: IntFilter<"Trade"> | number
    createdAt?: DateTimeFilter<"Trade"> | Date | string
    updatedAt?: DateTimeFilter<"Trade"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    likedBy?: UserListRelationFilter
    tradePicture?: TradePictureListRelationFilter
    tradeComment?: TradeCommentListRelationFilter
    tradeHistory?: XOR<HistoryNullableRelationFilter, HistoryWhereInput> | null
  }

  export type TradeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    region?: SortOrder
    img?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    likedBy?: UserOrderByRelationAggregateInput
    tradePicture?: TradePictureOrderByRelationAggregateInput
    tradeComment?: TradeCommentOrderByRelationAggregateInput
    tradeHistory?: HistoryOrderByWithRelationInput
  }

  export type TradeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TradeWhereInput | TradeWhereInput[]
    OR?: TradeWhereInput[]
    NOT?: TradeWhereInput | TradeWhereInput[]
    userId?: IntFilter<"Trade"> | number
    title?: StringFilter<"Trade"> | string
    content?: StringFilter<"Trade"> | string
    price?: IntFilter<"Trade"> | number
    region?: StringFilter<"Trade"> | string
    img?: StringFilter<"Trade"> | string
    like?: IntFilter<"Trade"> | number
    createdAt?: DateTimeFilter<"Trade"> | Date | string
    updatedAt?: DateTimeFilter<"Trade"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    likedBy?: UserListRelationFilter
    tradePicture?: TradePictureListRelationFilter
    tradeComment?: TradeCommentListRelationFilter
    tradeHistory?: XOR<HistoryNullableRelationFilter, HistoryWhereInput> | null
  }, "id">

  export type TradeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    region?: SortOrder
    img?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TradeCountOrderByAggregateInput
    _avg?: TradeAvgOrderByAggregateInput
    _max?: TradeMaxOrderByAggregateInput
    _min?: TradeMinOrderByAggregateInput
    _sum?: TradeSumOrderByAggregateInput
  }

  export type TradeScalarWhereWithAggregatesInput = {
    AND?: TradeScalarWhereWithAggregatesInput | TradeScalarWhereWithAggregatesInput[]
    OR?: TradeScalarWhereWithAggregatesInput[]
    NOT?: TradeScalarWhereWithAggregatesInput | TradeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Trade"> | number
    userId?: IntWithAggregatesFilter<"Trade"> | number
    title?: StringWithAggregatesFilter<"Trade"> | string
    content?: StringWithAggregatesFilter<"Trade"> | string
    price?: IntWithAggregatesFilter<"Trade"> | number
    region?: StringWithAggregatesFilter<"Trade"> | string
    img?: StringWithAggregatesFilter<"Trade"> | string
    like?: IntWithAggregatesFilter<"Trade"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Trade"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Trade"> | Date | string
  }

  export type TradePictureWhereInput = {
    AND?: TradePictureWhereInput | TradePictureWhereInput[]
    OR?: TradePictureWhereInput[]
    NOT?: TradePictureWhereInput | TradePictureWhereInput[]
    id?: IntFilter<"TradePicture"> | number
    tradeId?: IntFilter<"TradePicture"> | number
    imgUrl?: StringFilter<"TradePicture"> | string
    createdAt?: DateTimeFilter<"TradePicture"> | Date | string
    updatedAt?: DateTimeFilter<"TradePicture"> | Date | string
    trade?: XOR<TradeRelationFilter, TradeWhereInput>
  }

  export type TradePictureOrderByWithRelationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    imgUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trade?: TradeOrderByWithRelationInput
  }

  export type TradePictureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TradePictureWhereInput | TradePictureWhereInput[]
    OR?: TradePictureWhereInput[]
    NOT?: TradePictureWhereInput | TradePictureWhereInput[]
    tradeId?: IntFilter<"TradePicture"> | number
    imgUrl?: StringFilter<"TradePicture"> | string
    createdAt?: DateTimeFilter<"TradePicture"> | Date | string
    updatedAt?: DateTimeFilter<"TradePicture"> | Date | string
    trade?: XOR<TradeRelationFilter, TradeWhereInput>
  }, "id">

  export type TradePictureOrderByWithAggregationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    imgUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TradePictureCountOrderByAggregateInput
    _avg?: TradePictureAvgOrderByAggregateInput
    _max?: TradePictureMaxOrderByAggregateInput
    _min?: TradePictureMinOrderByAggregateInput
    _sum?: TradePictureSumOrderByAggregateInput
  }

  export type TradePictureScalarWhereWithAggregatesInput = {
    AND?: TradePictureScalarWhereWithAggregatesInput | TradePictureScalarWhereWithAggregatesInput[]
    OR?: TradePictureScalarWhereWithAggregatesInput[]
    NOT?: TradePictureScalarWhereWithAggregatesInput | TradePictureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TradePicture"> | number
    tradeId?: IntWithAggregatesFilter<"TradePicture"> | number
    imgUrl?: StringWithAggregatesFilter<"TradePicture"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TradePicture"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TradePicture"> | Date | string
  }

  export type TradeCommentWhereInput = {
    AND?: TradeCommentWhereInput | TradeCommentWhereInput[]
    OR?: TradeCommentWhereInput[]
    NOT?: TradeCommentWhereInput | TradeCommentWhereInput[]
    id?: IntFilter<"TradeComment"> | number
    tradeId?: IntFilter<"TradeComment"> | number
    userId?: IntFilter<"TradeComment"> | number
    comment?: StringFilter<"TradeComment"> | string
    like?: IntFilter<"TradeComment"> | number
    createdAt?: DateTimeFilter<"TradeComment"> | Date | string
    updatedAt?: DateTimeFilter<"TradeComment"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    likedby?: UserListRelationFilter
    trade?: XOR<TradeRelationFilter, TradeWhereInput>
  }

  export type TradeCommentOrderByWithRelationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    likedby?: UserOrderByRelationAggregateInput
    trade?: TradeOrderByWithRelationInput
  }

  export type TradeCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TradeCommentWhereInput | TradeCommentWhereInput[]
    OR?: TradeCommentWhereInput[]
    NOT?: TradeCommentWhereInput | TradeCommentWhereInput[]
    tradeId?: IntFilter<"TradeComment"> | number
    userId?: IntFilter<"TradeComment"> | number
    comment?: StringFilter<"TradeComment"> | string
    like?: IntFilter<"TradeComment"> | number
    createdAt?: DateTimeFilter<"TradeComment"> | Date | string
    updatedAt?: DateTimeFilter<"TradeComment"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    likedby?: UserListRelationFilter
    trade?: XOR<TradeRelationFilter, TradeWhereInput>
  }, "id">

  export type TradeCommentOrderByWithAggregationInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TradeCommentCountOrderByAggregateInput
    _avg?: TradeCommentAvgOrderByAggregateInput
    _max?: TradeCommentMaxOrderByAggregateInput
    _min?: TradeCommentMinOrderByAggregateInput
    _sum?: TradeCommentSumOrderByAggregateInput
  }

  export type TradeCommentScalarWhereWithAggregatesInput = {
    AND?: TradeCommentScalarWhereWithAggregatesInput | TradeCommentScalarWhereWithAggregatesInput[]
    OR?: TradeCommentScalarWhereWithAggregatesInput[]
    NOT?: TradeCommentScalarWhereWithAggregatesInput | TradeCommentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TradeComment"> | number
    tradeId?: IntWithAggregatesFilter<"TradeComment"> | number
    userId?: IntWithAggregatesFilter<"TradeComment"> | number
    comment?: StringWithAggregatesFilter<"TradeComment"> | string
    like?: IntWithAggregatesFilter<"TradeComment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TradeComment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TradeComment"> | Date | string
  }

  export type HistoryWhereInput = {
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    id?: IntFilter<"History"> | number
    userId?: IntFilter<"History"> | number
    tradeId?: IntFilter<"History"> | number
    type?: EnumTradeTypeFilter<"History"> | $Enums.TradeType
    user?: XOR<UserRelationFilter, UserWhereInput>
    trade?: XOR<TradeRelationFilter, TradeWhereInput>
  }

  export type HistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    type?: SortOrder
    user?: UserOrderByWithRelationInput
    trade?: TradeOrderByWithRelationInput
  }

  export type HistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tradeId?: number
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    userId?: IntFilter<"History"> | number
    type?: EnumTradeTypeFilter<"History"> | $Enums.TradeType
    user?: XOR<UserRelationFilter, UserWhereInput>
    trade?: XOR<TradeRelationFilter, TradeWhereInput>
  }, "id" | "tradeId">

  export type HistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    type?: SortOrder
    _count?: HistoryCountOrderByAggregateInput
    _avg?: HistoryAvgOrderByAggregateInput
    _max?: HistoryMaxOrderByAggregateInput
    _min?: HistoryMinOrderByAggregateInput
    _sum?: HistorySumOrderByAggregateInput
  }

  export type HistoryScalarWhereWithAggregatesInput = {
    AND?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    OR?: HistoryScalarWhereWithAggregatesInput[]
    NOT?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"History"> | number
    userId?: IntWithAggregatesFilter<"History"> | number
    tradeId?: IntWithAggregatesFilter<"History"> | number
    type?: EnumTradeTypeWithAggregatesFilter<"History"> | $Enums.TradeType
  }

  export type UserCreateInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenCreateNestedOneWithoutUserInput
    trade?: TradeCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentCreateNestedManyWithoutUserInput
    likedTrade?: TradeCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenUncheckedCreateNestedOneWithoutUserInput
    trade?: TradeUncheckedCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutUserInput
    likedTrade?: TradeUncheckedCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUpdateOneWithoutUserNestedInput
    trade?: TradeUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUncheckedUpdateOneWithoutUserNestedInput
    trade?: TradeUncheckedUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUncheckedUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateInput = {
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRefreshTokenInput
  }

  export type RefreshTokenUncheckedCreateInput = {
    id?: number
    userId: number
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenUpdateInput = {
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRefreshTokenNestedInput
  }

  export type RefreshTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenCreateManyInput = {
    id?: number
    userId: number
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenUpdateManyMutationInput = {
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCreateInput = {
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeInput
    likedBy?: UserCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedBy?: UserUncheckedCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureUncheckedCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeNestedInput
    likedBy?: UserUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserUncheckedUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUncheckedUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeCreateManyInput = {
    id?: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradePictureCreateInput = {
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trade: TradeCreateNestedOneWithoutTradePictureInput
  }

  export type TradePictureUncheckedCreateInput = {
    id?: number
    tradeId: number
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradePictureUpdateInput = {
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trade?: TradeUpdateOneRequiredWithoutTradePictureNestedInput
  }

  export type TradePictureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradePictureCreateManyInput = {
    id?: number
    tradeId: number
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradePictureUpdateManyMutationInput = {
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradePictureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCommentCreateInput = {
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeCommentInput
    likedby?: UserCreateNestedManyWithoutLikedTradeCommentInput
    trade: TradeCreateNestedOneWithoutTradeCommentInput
  }

  export type TradeCommentUncheckedCreateInput = {
    id?: number
    tradeId: number
    userId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedby?: UserUncheckedCreateNestedManyWithoutLikedTradeCommentInput
  }

  export type TradeCommentUpdateInput = {
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeCommentNestedInput
    likedby?: UserUpdateManyWithoutLikedTradeCommentNestedInput
    trade?: TradeUpdateOneRequiredWithoutTradeCommentNestedInput
  }

  export type TradeCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedby?: UserUncheckedUpdateManyWithoutLikedTradeCommentNestedInput
  }

  export type TradeCommentCreateManyInput = {
    id?: number
    tradeId: number
    userId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeCommentUpdateManyMutationInput = {
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryCreateInput = {
    type: $Enums.TradeType
    user: UserCreateNestedOneWithoutTradeHistoryInput
    trade: TradeCreateNestedOneWithoutTradeHistoryInput
  }

  export type HistoryUncheckedCreateInput = {
    id?: number
    userId: number
    tradeId: number
    type: $Enums.TradeType
  }

  export type HistoryUpdateInput = {
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
    user?: UserUpdateOneRequiredWithoutTradeHistoryNestedInput
    trade?: TradeUpdateOneRequiredWithoutTradeHistoryNestedInput
  }

  export type HistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
  }

  export type HistoryCreateManyInput = {
    id?: number
    userId: number
    tradeId: number
    type: $Enums.TradeType
  }

  export type HistoryUpdateManyMutationInput = {
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
  }

  export type HistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumGenderTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderType | EnumGenderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GenderType[] | null
    notIn?: $Enums.GenderType[] | null
    not?: NestedEnumGenderTypeNullableFilter<$PrismaModel> | $Enums.GenderType | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type EnumProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[]
    notIn?: $Enums.ProviderType[]
    not?: NestedEnumProviderTypeFilter<$PrismaModel> | $Enums.ProviderType
  }

  export type EnumRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[]
    notIn?: $Enums.RoleType[]
    not?: NestedEnumRoleTypeFilter<$PrismaModel> | $Enums.RoleType
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RefreshTokenNullableRelationFilter = {
    is?: RefreshTokenWhereInput | null
    isNot?: RefreshTokenWhereInput | null
  }

  export type TradeListRelationFilter = {
    every?: TradeWhereInput
    some?: TradeWhereInput
    none?: TradeWhereInput
  }

  export type TradeCommentListRelationFilter = {
    every?: TradeCommentWhereInput
    some?: TradeCommentWhereInput
    none?: TradeCommentWhereInput
  }

  export type HistoryListRelationFilter = {
    every?: HistoryWhereInput
    some?: HistoryWhereInput
    none?: HistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TradeCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    region?: SortOrder
    manner?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    introduce?: SortOrder
    socialId?: SortOrder
    provider?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    manner?: SortOrder
    age?: SortOrder
    socialId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    region?: SortOrder
    manner?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    introduce?: SortOrder
    socialId?: SortOrder
    provider?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    password?: SortOrder
    region?: SortOrder
    manner?: SortOrder
    age?: SortOrder
    gender?: SortOrder
    introduce?: SortOrder
    socialId?: SortOrder
    provider?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    manner?: SortOrder
    age?: SortOrder
    socialId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumGenderTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderType | EnumGenderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GenderType[] | null
    notIn?: $Enums.GenderType[] | null
    not?: NestedEnumGenderTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.GenderType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderTypeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type EnumProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[]
    notIn?: $Enums.ProviderType[]
    not?: NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumProviderTypeFilter<$PrismaModel>
  }

  export type EnumRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[]
    notIn?: $Enums.RoleType[]
    not?: NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumRoleTypeFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RefreshTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefreshTokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type RefreshTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefreshTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RefreshTokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TradePictureListRelationFilter = {
    every?: TradePictureWhereInput
    some?: TradePictureWhereInput
    none?: TradePictureWhereInput
  }

  export type HistoryNullableRelationFilter = {
    is?: HistoryWhereInput | null
    isNot?: HistoryWhereInput | null
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TradePictureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TradeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    region?: SortOrder
    img?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    like?: SortOrder
  }

  export type TradeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    region?: SortOrder
    img?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    price?: SortOrder
    region?: SortOrder
    img?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    price?: SortOrder
    like?: SortOrder
  }

  export type TradeRelationFilter = {
    is?: TradeWhereInput
    isNot?: TradeWhereInput
  }

  export type TradePictureCountOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    imgUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradePictureAvgOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
  }

  export type TradePictureMaxOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    imgUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradePictureMinOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    imgUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradePictureSumOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
  }

  export type TradeCommentCountOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    like?: SortOrder
  }

  export type TradeCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeCommentMinOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    comment?: SortOrder
    like?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TradeCommentSumOrderByAggregateInput = {
    id?: SortOrder
    tradeId?: SortOrder
    userId?: SortOrder
    like?: SortOrder
  }

  export type EnumTradeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TradeType | EnumTradeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TradeType[]
    notIn?: $Enums.TradeType[]
    not?: NestedEnumTradeTypeFilter<$PrismaModel> | $Enums.TradeType
  }

  export type HistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    type?: SortOrder
  }

  export type HistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
  }

  export type HistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    type?: SortOrder
  }

  export type HistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
    type?: SortOrder
  }

  export type HistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tradeId?: SortOrder
  }

  export type EnumTradeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TradeType | EnumTradeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TradeType[]
    notIn?: $Enums.TradeType[]
    not?: NestedEnumTradeTypeWithAggregatesFilter<$PrismaModel> | $Enums.TradeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTradeTypeFilter<$PrismaModel>
    _max?: NestedEnumTradeTypeFilter<$PrismaModel>
  }

  export type RefreshTokenCreateNestedOneWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput
    connect?: RefreshTokenWhereUniqueInput
  }

  export type TradeCreateNestedManyWithoutUserInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type TradeCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<TradeCommentCreateWithoutUserInput, TradeCommentUncheckedCreateWithoutUserInput> | TradeCommentCreateWithoutUserInput[] | TradeCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutUserInput | TradeCommentCreateOrConnectWithoutUserInput[]
    createMany?: TradeCommentCreateManyUserInputEnvelope
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
  }

  export type TradeCreateNestedManyWithoutLikedByInput = {
    create?: XOR<TradeCreateWithoutLikedByInput, TradeUncheckedCreateWithoutLikedByInput> | TradeCreateWithoutLikedByInput[] | TradeUncheckedCreateWithoutLikedByInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutLikedByInput | TradeCreateOrConnectWithoutLikedByInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type TradeCommentCreateNestedManyWithoutLikedbyInput = {
    create?: XOR<TradeCommentCreateWithoutLikedbyInput, TradeCommentUncheckedCreateWithoutLikedbyInput> | TradeCommentCreateWithoutLikedbyInput[] | TradeCommentUncheckedCreateWithoutLikedbyInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutLikedbyInput | TradeCommentCreateOrConnectWithoutLikedbyInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type RefreshTokenUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput
    connect?: RefreshTokenWhereUniqueInput
  }

  export type TradeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type TradeCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TradeCommentCreateWithoutUserInput, TradeCommentUncheckedCreateWithoutUserInput> | TradeCommentCreateWithoutUserInput[] | TradeCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutUserInput | TradeCommentCreateOrConnectWithoutUserInput[]
    createMany?: TradeCommentCreateManyUserInputEnvelope
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
  }

  export type TradeUncheckedCreateNestedManyWithoutLikedByInput = {
    create?: XOR<TradeCreateWithoutLikedByInput, TradeUncheckedCreateWithoutLikedByInput> | TradeCreateWithoutLikedByInput[] | TradeUncheckedCreateWithoutLikedByInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutLikedByInput | TradeCreateOrConnectWithoutLikedByInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
  }

  export type TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput = {
    create?: XOR<TradeCommentCreateWithoutLikedbyInput, TradeCommentUncheckedCreateWithoutLikedbyInput> | TradeCommentCreateWithoutLikedbyInput[] | TradeCommentUncheckedCreateWithoutLikedbyInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutLikedbyInput | TradeCommentCreateOrConnectWithoutLikedbyInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumGenderTypeFieldUpdateOperationsInput = {
    set?: $Enums.GenderType | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type EnumProviderTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProviderType
  }

  export type EnumRoleTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoleType
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RefreshTokenUpdateOneWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput
    upsert?: RefreshTokenUpsertWithoutUserInput
    disconnect?: RefreshTokenWhereInput | boolean
    delete?: RefreshTokenWhereInput | boolean
    connect?: RefreshTokenWhereUniqueInput
    update?: XOR<XOR<RefreshTokenUpdateToOneWithWhereWithoutUserInput, RefreshTokenUpdateWithoutUserInput>, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type TradeUpdateManyWithoutUserNestedInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutUserInput | TradeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutUserInput | TradeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutUserInput | TradeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type TradeCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<TradeCommentCreateWithoutUserInput, TradeCommentUncheckedCreateWithoutUserInput> | TradeCommentCreateWithoutUserInput[] | TradeCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutUserInput | TradeCommentCreateOrConnectWithoutUserInput[]
    upsert?: TradeCommentUpsertWithWhereUniqueWithoutUserInput | TradeCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TradeCommentCreateManyUserInputEnvelope
    set?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    disconnect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    delete?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    update?: TradeCommentUpdateWithWhereUniqueWithoutUserInput | TradeCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TradeCommentUpdateManyWithWhereWithoutUserInput | TradeCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
  }

  export type TradeUpdateManyWithoutLikedByNestedInput = {
    create?: XOR<TradeCreateWithoutLikedByInput, TradeUncheckedCreateWithoutLikedByInput> | TradeCreateWithoutLikedByInput[] | TradeUncheckedCreateWithoutLikedByInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutLikedByInput | TradeCreateOrConnectWithoutLikedByInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutLikedByInput | TradeUpsertWithWhereUniqueWithoutLikedByInput[]
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutLikedByInput | TradeUpdateWithWhereUniqueWithoutLikedByInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutLikedByInput | TradeUpdateManyWithWhereWithoutLikedByInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type TradeCommentUpdateManyWithoutLikedbyNestedInput = {
    create?: XOR<TradeCommentCreateWithoutLikedbyInput, TradeCommentUncheckedCreateWithoutLikedbyInput> | TradeCommentCreateWithoutLikedbyInput[] | TradeCommentUncheckedCreateWithoutLikedbyInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutLikedbyInput | TradeCommentCreateOrConnectWithoutLikedbyInput[]
    upsert?: TradeCommentUpsertWithWhereUniqueWithoutLikedbyInput | TradeCommentUpsertWithWhereUniqueWithoutLikedbyInput[]
    set?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    disconnect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    delete?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    update?: TradeCommentUpdateWithWhereUniqueWithoutLikedbyInput | TradeCommentUpdateWithWhereUniqueWithoutLikedbyInput[]
    updateMany?: TradeCommentUpdateManyWithWhereWithoutLikedbyInput | TradeCommentUpdateManyWithWhereWithoutLikedbyInput[]
    deleteMany?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RefreshTokenUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
    connectOrCreate?: RefreshTokenCreateOrConnectWithoutUserInput
    upsert?: RefreshTokenUpsertWithoutUserInput
    disconnect?: RefreshTokenWhereInput | boolean
    delete?: RefreshTokenWhereInput | boolean
    connect?: RefreshTokenWhereUniqueInput
    update?: XOR<XOR<RefreshTokenUpdateToOneWithWhereWithoutUserInput, RefreshTokenUpdateWithoutUserInput>, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type TradeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput> | TradeCreateWithoutUserInput[] | TradeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutUserInput | TradeCreateOrConnectWithoutUserInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutUserInput | TradeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TradeCreateManyUserInputEnvelope
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutUserInput | TradeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutUserInput | TradeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type TradeCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TradeCommentCreateWithoutUserInput, TradeCommentUncheckedCreateWithoutUserInput> | TradeCommentCreateWithoutUserInput[] | TradeCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutUserInput | TradeCommentCreateOrConnectWithoutUserInput[]
    upsert?: TradeCommentUpsertWithWhereUniqueWithoutUserInput | TradeCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TradeCommentCreateManyUserInputEnvelope
    set?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    disconnect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    delete?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    update?: TradeCommentUpdateWithWhereUniqueWithoutUserInput | TradeCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TradeCommentUpdateManyWithWhereWithoutUserInput | TradeCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
  }

  export type TradeUncheckedUpdateManyWithoutLikedByNestedInput = {
    create?: XOR<TradeCreateWithoutLikedByInput, TradeUncheckedCreateWithoutLikedByInput> | TradeCreateWithoutLikedByInput[] | TradeUncheckedCreateWithoutLikedByInput[]
    connectOrCreate?: TradeCreateOrConnectWithoutLikedByInput | TradeCreateOrConnectWithoutLikedByInput[]
    upsert?: TradeUpsertWithWhereUniqueWithoutLikedByInput | TradeUpsertWithWhereUniqueWithoutLikedByInput[]
    set?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    disconnect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    delete?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    connect?: TradeWhereUniqueInput | TradeWhereUniqueInput[]
    update?: TradeUpdateWithWhereUniqueWithoutLikedByInput | TradeUpdateWithWhereUniqueWithoutLikedByInput[]
    updateMany?: TradeUpdateManyWithWhereWithoutLikedByInput | TradeUpdateManyWithWhereWithoutLikedByInput[]
    deleteMany?: TradeScalarWhereInput | TradeScalarWhereInput[]
  }

  export type TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput = {
    create?: XOR<TradeCommentCreateWithoutLikedbyInput, TradeCommentUncheckedCreateWithoutLikedbyInput> | TradeCommentCreateWithoutLikedbyInput[] | TradeCommentUncheckedCreateWithoutLikedbyInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutLikedbyInput | TradeCommentCreateOrConnectWithoutLikedbyInput[]
    upsert?: TradeCommentUpsertWithWhereUniqueWithoutLikedbyInput | TradeCommentUpsertWithWhereUniqueWithoutLikedbyInput[]
    set?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    disconnect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    delete?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    update?: TradeCommentUpdateWithWhereUniqueWithoutLikedbyInput | TradeCommentUpdateWithWhereUniqueWithoutLikedbyInput[]
    updateMany?: TradeCommentUpdateManyWithWhereWithoutLikedbyInput | TradeCommentUpdateManyWithWhereWithoutLikedbyInput[]
    deleteMany?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRefreshTokenInput = {
    create?: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokenInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRefreshTokenNestedInput = {
    create?: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRefreshTokenInput
    upsert?: UserUpsertWithoutRefreshTokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRefreshTokenInput, UserUpdateWithoutRefreshTokenInput>, UserUncheckedUpdateWithoutRefreshTokenInput>
  }

  export type UserCreateNestedOneWithoutTradeInput = {
    create?: XOR<UserCreateWithoutTradeInput, UserUncheckedCreateWithoutTradeInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradeInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutLikedTradeInput = {
    create?: XOR<UserCreateWithoutLikedTradeInput, UserUncheckedCreateWithoutLikedTradeInput> | UserCreateWithoutLikedTradeInput[] | UserUncheckedCreateWithoutLikedTradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeInput | UserCreateOrConnectWithoutLikedTradeInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TradePictureCreateNestedManyWithoutTradeInput = {
    create?: XOR<TradePictureCreateWithoutTradeInput, TradePictureUncheckedCreateWithoutTradeInput> | TradePictureCreateWithoutTradeInput[] | TradePictureUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradePictureCreateOrConnectWithoutTradeInput | TradePictureCreateOrConnectWithoutTradeInput[]
    createMany?: TradePictureCreateManyTradeInputEnvelope
    connect?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
  }

  export type TradeCommentCreateNestedManyWithoutTradeInput = {
    create?: XOR<TradeCommentCreateWithoutTradeInput, TradeCommentUncheckedCreateWithoutTradeInput> | TradeCommentCreateWithoutTradeInput[] | TradeCommentUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutTradeInput | TradeCommentCreateOrConnectWithoutTradeInput[]
    createMany?: TradeCommentCreateManyTradeInputEnvelope
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
  }

  export type HistoryCreateNestedOneWithoutTradeInput = {
    create?: XOR<HistoryCreateWithoutTradeInput, HistoryUncheckedCreateWithoutTradeInput>
    connectOrCreate?: HistoryCreateOrConnectWithoutTradeInput
    connect?: HistoryWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutLikedTradeInput = {
    create?: XOR<UserCreateWithoutLikedTradeInput, UserUncheckedCreateWithoutLikedTradeInput> | UserCreateWithoutLikedTradeInput[] | UserUncheckedCreateWithoutLikedTradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeInput | UserCreateOrConnectWithoutLikedTradeInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TradePictureUncheckedCreateNestedManyWithoutTradeInput = {
    create?: XOR<TradePictureCreateWithoutTradeInput, TradePictureUncheckedCreateWithoutTradeInput> | TradePictureCreateWithoutTradeInput[] | TradePictureUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradePictureCreateOrConnectWithoutTradeInput | TradePictureCreateOrConnectWithoutTradeInput[]
    createMany?: TradePictureCreateManyTradeInputEnvelope
    connect?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
  }

  export type TradeCommentUncheckedCreateNestedManyWithoutTradeInput = {
    create?: XOR<TradeCommentCreateWithoutTradeInput, TradeCommentUncheckedCreateWithoutTradeInput> | TradeCommentCreateWithoutTradeInput[] | TradeCommentUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutTradeInput | TradeCommentCreateOrConnectWithoutTradeInput[]
    createMany?: TradeCommentCreateManyTradeInputEnvelope
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedOneWithoutTradeInput = {
    create?: XOR<HistoryCreateWithoutTradeInput, HistoryUncheckedCreateWithoutTradeInput>
    connectOrCreate?: HistoryCreateOrConnectWithoutTradeInput
    connect?: HistoryWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTradeNestedInput = {
    create?: XOR<UserCreateWithoutTradeInput, UserUncheckedCreateWithoutTradeInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradeInput
    upsert?: UserUpsertWithoutTradeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTradeInput, UserUpdateWithoutTradeInput>, UserUncheckedUpdateWithoutTradeInput>
  }

  export type UserUpdateManyWithoutLikedTradeNestedInput = {
    create?: XOR<UserCreateWithoutLikedTradeInput, UserUncheckedCreateWithoutLikedTradeInput> | UserCreateWithoutLikedTradeInput[] | UserUncheckedCreateWithoutLikedTradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeInput | UserCreateOrConnectWithoutLikedTradeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLikedTradeInput | UserUpsertWithWhereUniqueWithoutLikedTradeInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLikedTradeInput | UserUpdateWithWhereUniqueWithoutLikedTradeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLikedTradeInput | UserUpdateManyWithWhereWithoutLikedTradeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TradePictureUpdateManyWithoutTradeNestedInput = {
    create?: XOR<TradePictureCreateWithoutTradeInput, TradePictureUncheckedCreateWithoutTradeInput> | TradePictureCreateWithoutTradeInput[] | TradePictureUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradePictureCreateOrConnectWithoutTradeInput | TradePictureCreateOrConnectWithoutTradeInput[]
    upsert?: TradePictureUpsertWithWhereUniqueWithoutTradeInput | TradePictureUpsertWithWhereUniqueWithoutTradeInput[]
    createMany?: TradePictureCreateManyTradeInputEnvelope
    set?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    disconnect?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    delete?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    connect?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    update?: TradePictureUpdateWithWhereUniqueWithoutTradeInput | TradePictureUpdateWithWhereUniqueWithoutTradeInput[]
    updateMany?: TradePictureUpdateManyWithWhereWithoutTradeInput | TradePictureUpdateManyWithWhereWithoutTradeInput[]
    deleteMany?: TradePictureScalarWhereInput | TradePictureScalarWhereInput[]
  }

  export type TradeCommentUpdateManyWithoutTradeNestedInput = {
    create?: XOR<TradeCommentCreateWithoutTradeInput, TradeCommentUncheckedCreateWithoutTradeInput> | TradeCommentCreateWithoutTradeInput[] | TradeCommentUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutTradeInput | TradeCommentCreateOrConnectWithoutTradeInput[]
    upsert?: TradeCommentUpsertWithWhereUniqueWithoutTradeInput | TradeCommentUpsertWithWhereUniqueWithoutTradeInput[]
    createMany?: TradeCommentCreateManyTradeInputEnvelope
    set?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    disconnect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    delete?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    update?: TradeCommentUpdateWithWhereUniqueWithoutTradeInput | TradeCommentUpdateWithWhereUniqueWithoutTradeInput[]
    updateMany?: TradeCommentUpdateManyWithWhereWithoutTradeInput | TradeCommentUpdateManyWithWhereWithoutTradeInput[]
    deleteMany?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
  }

  export type HistoryUpdateOneWithoutTradeNestedInput = {
    create?: XOR<HistoryCreateWithoutTradeInput, HistoryUncheckedCreateWithoutTradeInput>
    connectOrCreate?: HistoryCreateOrConnectWithoutTradeInput
    upsert?: HistoryUpsertWithoutTradeInput
    disconnect?: HistoryWhereInput | boolean
    delete?: HistoryWhereInput | boolean
    connect?: HistoryWhereUniqueInput
    update?: XOR<XOR<HistoryUpdateToOneWithWhereWithoutTradeInput, HistoryUpdateWithoutTradeInput>, HistoryUncheckedUpdateWithoutTradeInput>
  }

  export type UserUncheckedUpdateManyWithoutLikedTradeNestedInput = {
    create?: XOR<UserCreateWithoutLikedTradeInput, UserUncheckedCreateWithoutLikedTradeInput> | UserCreateWithoutLikedTradeInput[] | UserUncheckedCreateWithoutLikedTradeInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeInput | UserCreateOrConnectWithoutLikedTradeInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLikedTradeInput | UserUpsertWithWhereUniqueWithoutLikedTradeInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLikedTradeInput | UserUpdateWithWhereUniqueWithoutLikedTradeInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLikedTradeInput | UserUpdateManyWithWhereWithoutLikedTradeInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TradePictureUncheckedUpdateManyWithoutTradeNestedInput = {
    create?: XOR<TradePictureCreateWithoutTradeInput, TradePictureUncheckedCreateWithoutTradeInput> | TradePictureCreateWithoutTradeInput[] | TradePictureUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradePictureCreateOrConnectWithoutTradeInput | TradePictureCreateOrConnectWithoutTradeInput[]
    upsert?: TradePictureUpsertWithWhereUniqueWithoutTradeInput | TradePictureUpsertWithWhereUniqueWithoutTradeInput[]
    createMany?: TradePictureCreateManyTradeInputEnvelope
    set?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    disconnect?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    delete?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    connect?: TradePictureWhereUniqueInput | TradePictureWhereUniqueInput[]
    update?: TradePictureUpdateWithWhereUniqueWithoutTradeInput | TradePictureUpdateWithWhereUniqueWithoutTradeInput[]
    updateMany?: TradePictureUpdateManyWithWhereWithoutTradeInput | TradePictureUpdateManyWithWhereWithoutTradeInput[]
    deleteMany?: TradePictureScalarWhereInput | TradePictureScalarWhereInput[]
  }

  export type TradeCommentUncheckedUpdateManyWithoutTradeNestedInput = {
    create?: XOR<TradeCommentCreateWithoutTradeInput, TradeCommentUncheckedCreateWithoutTradeInput> | TradeCommentCreateWithoutTradeInput[] | TradeCommentUncheckedCreateWithoutTradeInput[]
    connectOrCreate?: TradeCommentCreateOrConnectWithoutTradeInput | TradeCommentCreateOrConnectWithoutTradeInput[]
    upsert?: TradeCommentUpsertWithWhereUniqueWithoutTradeInput | TradeCommentUpsertWithWhereUniqueWithoutTradeInput[]
    createMany?: TradeCommentCreateManyTradeInputEnvelope
    set?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    disconnect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    delete?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    connect?: TradeCommentWhereUniqueInput | TradeCommentWhereUniqueInput[]
    update?: TradeCommentUpdateWithWhereUniqueWithoutTradeInput | TradeCommentUpdateWithWhereUniqueWithoutTradeInput[]
    updateMany?: TradeCommentUpdateManyWithWhereWithoutTradeInput | TradeCommentUpdateManyWithWhereWithoutTradeInput[]
    deleteMany?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateOneWithoutTradeNestedInput = {
    create?: XOR<HistoryCreateWithoutTradeInput, HistoryUncheckedCreateWithoutTradeInput>
    connectOrCreate?: HistoryCreateOrConnectWithoutTradeInput
    upsert?: HistoryUpsertWithoutTradeInput
    disconnect?: HistoryWhereInput | boolean
    delete?: HistoryWhereInput | boolean
    connect?: HistoryWhereUniqueInput
    update?: XOR<XOR<HistoryUpdateToOneWithWhereWithoutTradeInput, HistoryUpdateWithoutTradeInput>, HistoryUncheckedUpdateWithoutTradeInput>
  }

  export type TradeCreateNestedOneWithoutTradePictureInput = {
    create?: XOR<TradeCreateWithoutTradePictureInput, TradeUncheckedCreateWithoutTradePictureInput>
    connectOrCreate?: TradeCreateOrConnectWithoutTradePictureInput
    connect?: TradeWhereUniqueInput
  }

  export type TradeUpdateOneRequiredWithoutTradePictureNestedInput = {
    create?: XOR<TradeCreateWithoutTradePictureInput, TradeUncheckedCreateWithoutTradePictureInput>
    connectOrCreate?: TradeCreateOrConnectWithoutTradePictureInput
    upsert?: TradeUpsertWithoutTradePictureInput
    connect?: TradeWhereUniqueInput
    update?: XOR<XOR<TradeUpdateToOneWithWhereWithoutTradePictureInput, TradeUpdateWithoutTradePictureInput>, TradeUncheckedUpdateWithoutTradePictureInput>
  }

  export type UserCreateNestedOneWithoutTradeCommentInput = {
    create?: XOR<UserCreateWithoutTradeCommentInput, UserUncheckedCreateWithoutTradeCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradeCommentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutLikedTradeCommentInput = {
    create?: XOR<UserCreateWithoutLikedTradeCommentInput, UserUncheckedCreateWithoutLikedTradeCommentInput> | UserCreateWithoutLikedTradeCommentInput[] | UserUncheckedCreateWithoutLikedTradeCommentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeCommentInput | UserCreateOrConnectWithoutLikedTradeCommentInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TradeCreateNestedOneWithoutTradeCommentInput = {
    create?: XOR<TradeCreateWithoutTradeCommentInput, TradeUncheckedCreateWithoutTradeCommentInput>
    connectOrCreate?: TradeCreateOrConnectWithoutTradeCommentInput
    connect?: TradeWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutLikedTradeCommentInput = {
    create?: XOR<UserCreateWithoutLikedTradeCommentInput, UserUncheckedCreateWithoutLikedTradeCommentInput> | UserCreateWithoutLikedTradeCommentInput[] | UserUncheckedCreateWithoutLikedTradeCommentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeCommentInput | UserCreateOrConnectWithoutLikedTradeCommentInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutTradeCommentNestedInput = {
    create?: XOR<UserCreateWithoutTradeCommentInput, UserUncheckedCreateWithoutTradeCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradeCommentInput
    upsert?: UserUpsertWithoutTradeCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTradeCommentInput, UserUpdateWithoutTradeCommentInput>, UserUncheckedUpdateWithoutTradeCommentInput>
  }

  export type UserUpdateManyWithoutLikedTradeCommentNestedInput = {
    create?: XOR<UserCreateWithoutLikedTradeCommentInput, UserUncheckedCreateWithoutLikedTradeCommentInput> | UserCreateWithoutLikedTradeCommentInput[] | UserUncheckedCreateWithoutLikedTradeCommentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeCommentInput | UserCreateOrConnectWithoutLikedTradeCommentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLikedTradeCommentInput | UserUpsertWithWhereUniqueWithoutLikedTradeCommentInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLikedTradeCommentInput | UserUpdateWithWhereUniqueWithoutLikedTradeCommentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLikedTradeCommentInput | UserUpdateManyWithWhereWithoutLikedTradeCommentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TradeUpdateOneRequiredWithoutTradeCommentNestedInput = {
    create?: XOR<TradeCreateWithoutTradeCommentInput, TradeUncheckedCreateWithoutTradeCommentInput>
    connectOrCreate?: TradeCreateOrConnectWithoutTradeCommentInput
    upsert?: TradeUpsertWithoutTradeCommentInput
    connect?: TradeWhereUniqueInput
    update?: XOR<XOR<TradeUpdateToOneWithWhereWithoutTradeCommentInput, TradeUpdateWithoutTradeCommentInput>, TradeUncheckedUpdateWithoutTradeCommentInput>
  }

  export type UserUncheckedUpdateManyWithoutLikedTradeCommentNestedInput = {
    create?: XOR<UserCreateWithoutLikedTradeCommentInput, UserUncheckedCreateWithoutLikedTradeCommentInput> | UserCreateWithoutLikedTradeCommentInput[] | UserUncheckedCreateWithoutLikedTradeCommentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLikedTradeCommentInput | UserCreateOrConnectWithoutLikedTradeCommentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLikedTradeCommentInput | UserUpsertWithWhereUniqueWithoutLikedTradeCommentInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLikedTradeCommentInput | UserUpdateWithWhereUniqueWithoutLikedTradeCommentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLikedTradeCommentInput | UserUpdateManyWithWhereWithoutLikedTradeCommentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTradeHistoryInput = {
    create?: XOR<UserCreateWithoutTradeHistoryInput, UserUncheckedCreateWithoutTradeHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradeHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type TradeCreateNestedOneWithoutTradeHistoryInput = {
    create?: XOR<TradeCreateWithoutTradeHistoryInput, TradeUncheckedCreateWithoutTradeHistoryInput>
    connectOrCreate?: TradeCreateOrConnectWithoutTradeHistoryInput
    connect?: TradeWhereUniqueInput
  }

  export type EnumTradeTypeFieldUpdateOperationsInput = {
    set?: $Enums.TradeType
  }

  export type UserUpdateOneRequiredWithoutTradeHistoryNestedInput = {
    create?: XOR<UserCreateWithoutTradeHistoryInput, UserUncheckedCreateWithoutTradeHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutTradeHistoryInput
    upsert?: UserUpsertWithoutTradeHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTradeHistoryInput, UserUpdateWithoutTradeHistoryInput>, UserUncheckedUpdateWithoutTradeHistoryInput>
  }

  export type TradeUpdateOneRequiredWithoutTradeHistoryNestedInput = {
    create?: XOR<TradeCreateWithoutTradeHistoryInput, TradeUncheckedCreateWithoutTradeHistoryInput>
    connectOrCreate?: TradeCreateOrConnectWithoutTradeHistoryInput
    upsert?: TradeUpsertWithoutTradeHistoryInput
    connect?: TradeWhereUniqueInput
    update?: XOR<XOR<TradeUpdateToOneWithWhereWithoutTradeHistoryInput, TradeUpdateWithoutTradeHistoryInput>, TradeUncheckedUpdateWithoutTradeHistoryInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenderTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderType | EnumGenderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GenderType[] | null
    notIn?: $Enums.GenderType[] | null
    not?: NestedEnumGenderTypeNullableFilter<$PrismaModel> | $Enums.GenderType | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedEnumProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[]
    notIn?: $Enums.ProviderType[]
    not?: NestedEnumProviderTypeFilter<$PrismaModel> | $Enums.ProviderType
  }

  export type NestedEnumRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[]
    notIn?: $Enums.RoleType[]
    not?: NestedEnumRoleTypeFilter<$PrismaModel> | $Enums.RoleType
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenderTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GenderType | EnumGenderTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.GenderType[] | null
    notIn?: $Enums.GenderType[] | null
    not?: NestedEnumGenderTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.GenderType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderTypeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProviderType | EnumProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProviderType[]
    notIn?: $Enums.ProviderType[]
    not?: NestedEnumProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumProviderTypeFilter<$PrismaModel>
  }

  export type NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[]
    notIn?: $Enums.RoleType[]
    not?: NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumRoleTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumTradeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TradeType | EnumTradeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TradeType[]
    notIn?: $Enums.TradeType[]
    not?: NestedEnumTradeTypeFilter<$PrismaModel> | $Enums.TradeType
  }

  export type NestedEnumTradeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TradeType | EnumTradeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TradeType[]
    notIn?: $Enums.TradeType[]
    not?: NestedEnumTradeTypeWithAggregatesFilter<$PrismaModel> | $Enums.TradeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTradeTypeFilter<$PrismaModel>
    _max?: NestedEnumTradeTypeFilter<$PrismaModel>
  }

  export type RefreshTokenCreateWithoutUserInput = {
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenUncheckedCreateWithoutUserInput = {
    id?: number
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RefreshTokenCreateOrConnectWithoutUserInput = {
    where: RefreshTokenWhereUniqueInput
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
  }

  export type TradeCreateWithoutUserInput = {
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedBy?: UserCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedBy?: UserUncheckedCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureUncheckedCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutUserInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput>
  }

  export type TradeCreateManyUserInputEnvelope = {
    data: TradeCreateManyUserInput | TradeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TradeCommentCreateWithoutUserInput = {
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedby?: UserCreateNestedManyWithoutLikedTradeCommentInput
    trade: TradeCreateNestedOneWithoutTradeCommentInput
  }

  export type TradeCommentUncheckedCreateWithoutUserInput = {
    id?: number
    tradeId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedby?: UserUncheckedCreateNestedManyWithoutLikedTradeCommentInput
  }

  export type TradeCommentCreateOrConnectWithoutUserInput = {
    where: TradeCommentWhereUniqueInput
    create: XOR<TradeCommentCreateWithoutUserInput, TradeCommentUncheckedCreateWithoutUserInput>
  }

  export type TradeCommentCreateManyUserInputEnvelope = {
    data: TradeCommentCreateManyUserInput | TradeCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TradeCreateWithoutLikedByInput = {
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeInput
    tradePicture?: TradePictureCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutLikedByInput = {
    id?: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tradePicture?: TradePictureUncheckedCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutLikedByInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutLikedByInput, TradeUncheckedCreateWithoutLikedByInput>
  }

  export type TradeCommentCreateWithoutLikedbyInput = {
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeCommentInput
    trade: TradeCreateNestedOneWithoutTradeCommentInput
  }

  export type TradeCommentUncheckedCreateWithoutLikedbyInput = {
    id?: number
    tradeId: number
    userId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeCommentCreateOrConnectWithoutLikedbyInput = {
    where: TradeCommentWhereUniqueInput
    create: XOR<TradeCommentCreateWithoutLikedbyInput, TradeCommentUncheckedCreateWithoutLikedbyInput>
  }

  export type HistoryCreateWithoutUserInput = {
    type: $Enums.TradeType
    trade: TradeCreateNestedOneWithoutTradeHistoryInput
  }

  export type HistoryUncheckedCreateWithoutUserInput = {
    id?: number
    tradeId: number
    type: $Enums.TradeType
  }

  export type HistoryCreateOrConnectWithoutUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryCreateManyUserInputEnvelope = {
    data: HistoryCreateManyUserInput | HistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RefreshTokenUpsertWithoutUserInput = {
    update: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
    create: XOR<RefreshTokenCreateWithoutUserInput, RefreshTokenUncheckedCreateWithoutUserInput>
    where?: RefreshTokenWhereInput
  }

  export type RefreshTokenUpdateToOneWithWhereWithoutUserInput = {
    where?: RefreshTokenWhereInput
    data: XOR<RefreshTokenUpdateWithoutUserInput, RefreshTokenUncheckedUpdateWithoutUserInput>
  }

  export type RefreshTokenUpdateWithoutUserInput = {
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RefreshTokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeUpsertWithWhereUniqueWithoutUserInput = {
    where: TradeWhereUniqueInput
    update: XOR<TradeUpdateWithoutUserInput, TradeUncheckedUpdateWithoutUserInput>
    create: XOR<TradeCreateWithoutUserInput, TradeUncheckedCreateWithoutUserInput>
  }

  export type TradeUpdateWithWhereUniqueWithoutUserInput = {
    where: TradeWhereUniqueInput
    data: XOR<TradeUpdateWithoutUserInput, TradeUncheckedUpdateWithoutUserInput>
  }

  export type TradeUpdateManyWithWhereWithoutUserInput = {
    where: TradeScalarWhereInput
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyWithoutUserInput>
  }

  export type TradeScalarWhereInput = {
    AND?: TradeScalarWhereInput | TradeScalarWhereInput[]
    OR?: TradeScalarWhereInput[]
    NOT?: TradeScalarWhereInput | TradeScalarWhereInput[]
    id?: IntFilter<"Trade"> | number
    userId?: IntFilter<"Trade"> | number
    title?: StringFilter<"Trade"> | string
    content?: StringFilter<"Trade"> | string
    price?: IntFilter<"Trade"> | number
    region?: StringFilter<"Trade"> | string
    img?: StringFilter<"Trade"> | string
    like?: IntFilter<"Trade"> | number
    createdAt?: DateTimeFilter<"Trade"> | Date | string
    updatedAt?: DateTimeFilter<"Trade"> | Date | string
  }

  export type TradeCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: TradeCommentWhereUniqueInput
    update: XOR<TradeCommentUpdateWithoutUserInput, TradeCommentUncheckedUpdateWithoutUserInput>
    create: XOR<TradeCommentCreateWithoutUserInput, TradeCommentUncheckedCreateWithoutUserInput>
  }

  export type TradeCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: TradeCommentWhereUniqueInput
    data: XOR<TradeCommentUpdateWithoutUserInput, TradeCommentUncheckedUpdateWithoutUserInput>
  }

  export type TradeCommentUpdateManyWithWhereWithoutUserInput = {
    where: TradeCommentScalarWhereInput
    data: XOR<TradeCommentUpdateManyMutationInput, TradeCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type TradeCommentScalarWhereInput = {
    AND?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
    OR?: TradeCommentScalarWhereInput[]
    NOT?: TradeCommentScalarWhereInput | TradeCommentScalarWhereInput[]
    id?: IntFilter<"TradeComment"> | number
    tradeId?: IntFilter<"TradeComment"> | number
    userId?: IntFilter<"TradeComment"> | number
    comment?: StringFilter<"TradeComment"> | string
    like?: IntFilter<"TradeComment"> | number
    createdAt?: DateTimeFilter<"TradeComment"> | Date | string
    updatedAt?: DateTimeFilter<"TradeComment"> | Date | string
  }

  export type TradeUpsertWithWhereUniqueWithoutLikedByInput = {
    where: TradeWhereUniqueInput
    update: XOR<TradeUpdateWithoutLikedByInput, TradeUncheckedUpdateWithoutLikedByInput>
    create: XOR<TradeCreateWithoutLikedByInput, TradeUncheckedCreateWithoutLikedByInput>
  }

  export type TradeUpdateWithWhereUniqueWithoutLikedByInput = {
    where: TradeWhereUniqueInput
    data: XOR<TradeUpdateWithoutLikedByInput, TradeUncheckedUpdateWithoutLikedByInput>
  }

  export type TradeUpdateManyWithWhereWithoutLikedByInput = {
    where: TradeScalarWhereInput
    data: XOR<TradeUpdateManyMutationInput, TradeUncheckedUpdateManyWithoutLikedByInput>
  }

  export type TradeCommentUpsertWithWhereUniqueWithoutLikedbyInput = {
    where: TradeCommentWhereUniqueInput
    update: XOR<TradeCommentUpdateWithoutLikedbyInput, TradeCommentUncheckedUpdateWithoutLikedbyInput>
    create: XOR<TradeCommentCreateWithoutLikedbyInput, TradeCommentUncheckedCreateWithoutLikedbyInput>
  }

  export type TradeCommentUpdateWithWhereUniqueWithoutLikedbyInput = {
    where: TradeCommentWhereUniqueInput
    data: XOR<TradeCommentUpdateWithoutLikedbyInput, TradeCommentUncheckedUpdateWithoutLikedbyInput>
  }

  export type TradeCommentUpdateManyWithWhereWithoutLikedbyInput = {
    where: TradeCommentScalarWhereInput
    data: XOR<TradeCommentUpdateManyMutationInput, TradeCommentUncheckedUpdateManyWithoutLikedbyInput>
  }

  export type HistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type HistoryScalarWhereInput = {
    AND?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    OR?: HistoryScalarWhereInput[]
    NOT?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    id?: IntFilter<"History"> | number
    userId?: IntFilter<"History"> | number
    tradeId?: IntFilter<"History"> | number
    type?: EnumTradeTypeFilter<"History"> | $Enums.TradeType
  }

  export type UserCreateWithoutRefreshTokenInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    trade?: TradeCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentCreateNestedManyWithoutUserInput
    likedTrade?: TradeCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRefreshTokenInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    trade?: TradeUncheckedCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutUserInput
    likedTrade?: TradeUncheckedCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRefreshTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
  }

  export type UserUpsertWithoutRefreshTokenInput = {
    update: XOR<UserUpdateWithoutRefreshTokenInput, UserUncheckedUpdateWithoutRefreshTokenInput>
    create: XOR<UserCreateWithoutRefreshTokenInput, UserUncheckedCreateWithoutRefreshTokenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRefreshTokenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRefreshTokenInput, UserUncheckedUpdateWithoutRefreshTokenInput>
  }

  export type UserUpdateWithoutRefreshTokenInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trade?: TradeUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRefreshTokenInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trade?: TradeUncheckedUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUncheckedUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTradeInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenCreateNestedOneWithoutUserInput
    tradeComment?: TradeCommentCreateNestedManyWithoutUserInput
    likedTrade?: TradeCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTradeInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenUncheckedCreateNestedOneWithoutUserInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutUserInput
    likedTrade?: TradeUncheckedCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTradeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTradeInput, UserUncheckedCreateWithoutTradeInput>
  }

  export type UserCreateWithoutLikedTradeInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenCreateNestedOneWithoutUserInput
    trade?: TradeCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentCreateNestedManyWithoutUserInput
    likedTradeComment?: TradeCommentCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikedTradeInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenUncheckedCreateNestedOneWithoutUserInput
    trade?: TradeUncheckedCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutUserInput
    likedTradeComment?: TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikedTradeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedTradeInput, UserUncheckedCreateWithoutLikedTradeInput>
  }

  export type TradePictureCreateWithoutTradeInput = {
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradePictureUncheckedCreateWithoutTradeInput = {
    id?: number
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradePictureCreateOrConnectWithoutTradeInput = {
    where: TradePictureWhereUniqueInput
    create: XOR<TradePictureCreateWithoutTradeInput, TradePictureUncheckedCreateWithoutTradeInput>
  }

  export type TradePictureCreateManyTradeInputEnvelope = {
    data: TradePictureCreateManyTradeInput | TradePictureCreateManyTradeInput[]
    skipDuplicates?: boolean
  }

  export type TradeCommentCreateWithoutTradeInput = {
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeCommentInput
    likedby?: UserCreateNestedManyWithoutLikedTradeCommentInput
  }

  export type TradeCommentUncheckedCreateWithoutTradeInput = {
    id?: number
    userId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedby?: UserUncheckedCreateNestedManyWithoutLikedTradeCommentInput
  }

  export type TradeCommentCreateOrConnectWithoutTradeInput = {
    where: TradeCommentWhereUniqueInput
    create: XOR<TradeCommentCreateWithoutTradeInput, TradeCommentUncheckedCreateWithoutTradeInput>
  }

  export type TradeCommentCreateManyTradeInputEnvelope = {
    data: TradeCommentCreateManyTradeInput | TradeCommentCreateManyTradeInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutTradeInput = {
    type: $Enums.TradeType
    user: UserCreateNestedOneWithoutTradeHistoryInput
  }

  export type HistoryUncheckedCreateWithoutTradeInput = {
    id?: number
    userId: number
    type: $Enums.TradeType
  }

  export type HistoryCreateOrConnectWithoutTradeInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutTradeInput, HistoryUncheckedCreateWithoutTradeInput>
  }

  export type UserUpsertWithoutTradeInput = {
    update: XOR<UserUpdateWithoutTradeInput, UserUncheckedUpdateWithoutTradeInput>
    create: XOR<UserCreateWithoutTradeInput, UserUncheckedCreateWithoutTradeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTradeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTradeInput, UserUncheckedUpdateWithoutTradeInput>
  }

  export type UserUpdateWithoutTradeInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUpdateOneWithoutUserNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUncheckedUpdateOneWithoutUserNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUncheckedUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutLikedTradeInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLikedTradeInput, UserUncheckedUpdateWithoutLikedTradeInput>
    create: XOR<UserCreateWithoutLikedTradeInput, UserUncheckedCreateWithoutLikedTradeInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLikedTradeInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLikedTradeInput, UserUncheckedUpdateWithoutLikedTradeInput>
  }

  export type UserUpdateManyWithWhereWithoutLikedTradeInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLikedTradeInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    nickname?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    region?: StringNullableFilter<"User"> | string | null
    manner?: FloatFilter<"User"> | number
    age?: IntNullableFilter<"User"> | number | null
    gender?: EnumGenderTypeNullableFilter<"User"> | $Enums.GenderType | null
    introduce?: StringNullableFilter<"User"> | string | null
    socialId?: BigIntNullableFilter<"User"> | bigint | number | null
    provider?: EnumProviderTypeFilter<"User"> | $Enums.ProviderType
    role?: EnumRoleTypeFilter<"User"> | $Enums.RoleType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type TradePictureUpsertWithWhereUniqueWithoutTradeInput = {
    where: TradePictureWhereUniqueInput
    update: XOR<TradePictureUpdateWithoutTradeInput, TradePictureUncheckedUpdateWithoutTradeInput>
    create: XOR<TradePictureCreateWithoutTradeInput, TradePictureUncheckedCreateWithoutTradeInput>
  }

  export type TradePictureUpdateWithWhereUniqueWithoutTradeInput = {
    where: TradePictureWhereUniqueInput
    data: XOR<TradePictureUpdateWithoutTradeInput, TradePictureUncheckedUpdateWithoutTradeInput>
  }

  export type TradePictureUpdateManyWithWhereWithoutTradeInput = {
    where: TradePictureScalarWhereInput
    data: XOR<TradePictureUpdateManyMutationInput, TradePictureUncheckedUpdateManyWithoutTradeInput>
  }

  export type TradePictureScalarWhereInput = {
    AND?: TradePictureScalarWhereInput | TradePictureScalarWhereInput[]
    OR?: TradePictureScalarWhereInput[]
    NOT?: TradePictureScalarWhereInput | TradePictureScalarWhereInput[]
    id?: IntFilter<"TradePicture"> | number
    tradeId?: IntFilter<"TradePicture"> | number
    imgUrl?: StringFilter<"TradePicture"> | string
    createdAt?: DateTimeFilter<"TradePicture"> | Date | string
    updatedAt?: DateTimeFilter<"TradePicture"> | Date | string
  }

  export type TradeCommentUpsertWithWhereUniqueWithoutTradeInput = {
    where: TradeCommentWhereUniqueInput
    update: XOR<TradeCommentUpdateWithoutTradeInput, TradeCommentUncheckedUpdateWithoutTradeInput>
    create: XOR<TradeCommentCreateWithoutTradeInput, TradeCommentUncheckedCreateWithoutTradeInput>
  }

  export type TradeCommentUpdateWithWhereUniqueWithoutTradeInput = {
    where: TradeCommentWhereUniqueInput
    data: XOR<TradeCommentUpdateWithoutTradeInput, TradeCommentUncheckedUpdateWithoutTradeInput>
  }

  export type TradeCommentUpdateManyWithWhereWithoutTradeInput = {
    where: TradeCommentScalarWhereInput
    data: XOR<TradeCommentUpdateManyMutationInput, TradeCommentUncheckedUpdateManyWithoutTradeInput>
  }

  export type HistoryUpsertWithoutTradeInput = {
    update: XOR<HistoryUpdateWithoutTradeInput, HistoryUncheckedUpdateWithoutTradeInput>
    create: XOR<HistoryCreateWithoutTradeInput, HistoryUncheckedCreateWithoutTradeInput>
    where?: HistoryWhereInput
  }

  export type HistoryUpdateToOneWithWhereWithoutTradeInput = {
    where?: HistoryWhereInput
    data: XOR<HistoryUpdateWithoutTradeInput, HistoryUncheckedUpdateWithoutTradeInput>
  }

  export type HistoryUpdateWithoutTradeInput = {
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
    user?: UserUpdateOneRequiredWithoutTradeHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
  }

  export type TradeCreateWithoutTradePictureInput = {
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeInput
    likedBy?: UserCreateNestedManyWithoutLikedTradeInput
    tradeComment?: TradeCommentCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutTradePictureInput = {
    id?: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedBy?: UserUncheckedCreateNestedManyWithoutLikedTradeInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutTradePictureInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutTradePictureInput, TradeUncheckedCreateWithoutTradePictureInput>
  }

  export type TradeUpsertWithoutTradePictureInput = {
    update: XOR<TradeUpdateWithoutTradePictureInput, TradeUncheckedUpdateWithoutTradePictureInput>
    create: XOR<TradeCreateWithoutTradePictureInput, TradeUncheckedCreateWithoutTradePictureInput>
    where?: TradeWhereInput
  }

  export type TradeUpdateToOneWithWhereWithoutTradePictureInput = {
    where?: TradeWhereInput
    data: XOR<TradeUpdateWithoutTradePictureInput, TradeUncheckedUpdateWithoutTradePictureInput>
  }

  export type TradeUpdateWithoutTradePictureInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeNestedInput
    likedBy?: UserUpdateManyWithoutLikedTradeNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutTradePictureInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserUncheckedUpdateManyWithoutLikedTradeNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type UserCreateWithoutTradeCommentInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenCreateNestedOneWithoutUserInput
    trade?: TradeCreateNestedManyWithoutUserInput
    likedTrade?: TradeCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTradeCommentInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenUncheckedCreateNestedOneWithoutUserInput
    trade?: TradeUncheckedCreateNestedManyWithoutUserInput
    likedTrade?: TradeUncheckedCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput
    tradeHistory?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTradeCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTradeCommentInput, UserUncheckedCreateWithoutTradeCommentInput>
  }

  export type UserCreateWithoutLikedTradeCommentInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenCreateNestedOneWithoutUserInput
    trade?: TradeCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentCreateNestedManyWithoutUserInput
    likedTrade?: TradeCreateNestedManyWithoutLikedByInput
    tradeHistory?: HistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikedTradeCommentInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenUncheckedCreateNestedOneWithoutUserInput
    trade?: TradeUncheckedCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutUserInput
    likedTrade?: TradeUncheckedCreateNestedManyWithoutLikedByInput
    tradeHistory?: HistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikedTradeCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedTradeCommentInput, UserUncheckedCreateWithoutLikedTradeCommentInput>
  }

  export type TradeCreateWithoutTradeCommentInput = {
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeInput
    likedBy?: UserCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryCreateNestedOneWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutTradeCommentInput = {
    id?: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedBy?: UserUncheckedCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureUncheckedCreateNestedManyWithoutTradeInput
    tradeHistory?: HistoryUncheckedCreateNestedOneWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutTradeCommentInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutTradeCommentInput, TradeUncheckedCreateWithoutTradeCommentInput>
  }

  export type UserUpsertWithoutTradeCommentInput = {
    update: XOR<UserUpdateWithoutTradeCommentInput, UserUncheckedUpdateWithoutTradeCommentInput>
    create: XOR<UserCreateWithoutTradeCommentInput, UserUncheckedCreateWithoutTradeCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTradeCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTradeCommentInput, UserUncheckedUpdateWithoutTradeCommentInput>
  }

  export type UserUpdateWithoutTradeCommentInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUpdateOneWithoutUserNestedInput
    trade?: TradeUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTradeCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUncheckedUpdateOneWithoutUserNestedInput
    trade?: TradeUncheckedUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUncheckedUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutLikedTradeCommentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLikedTradeCommentInput, UserUncheckedUpdateWithoutLikedTradeCommentInput>
    create: XOR<UserCreateWithoutLikedTradeCommentInput, UserUncheckedCreateWithoutLikedTradeCommentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLikedTradeCommentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLikedTradeCommentInput, UserUncheckedUpdateWithoutLikedTradeCommentInput>
  }

  export type UserUpdateManyWithWhereWithoutLikedTradeCommentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLikedTradeCommentInput>
  }

  export type TradeUpsertWithoutTradeCommentInput = {
    update: XOR<TradeUpdateWithoutTradeCommentInput, TradeUncheckedUpdateWithoutTradeCommentInput>
    create: XOR<TradeCreateWithoutTradeCommentInput, TradeUncheckedCreateWithoutTradeCommentInput>
    where?: TradeWhereInput
  }

  export type TradeUpdateToOneWithWhereWithoutTradeCommentInput = {
    where?: TradeWhereInput
    data: XOR<TradeUpdateWithoutTradeCommentInput, TradeUncheckedUpdateWithoutTradeCommentInput>
  }

  export type TradeUpdateWithoutTradeCommentInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeNestedInput
    likedBy?: UserUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutTradeCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserUncheckedUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUncheckedUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type UserCreateWithoutTradeHistoryInput = {
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenCreateNestedOneWithoutUserInput
    trade?: TradeCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentCreateNestedManyWithoutUserInput
    likedTrade?: TradeCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentCreateNestedManyWithoutLikedbyInput
  }

  export type UserUncheckedCreateWithoutTradeHistoryInput = {
    id?: number
    email: string
    nickname: string
    password?: string | null
    region?: string | null
    manner?: number
    age?: number | null
    gender?: $Enums.GenderType | null
    introduce?: string | null
    socialId?: bigint | number | null
    provider?: $Enums.ProviderType
    role?: $Enums.RoleType
    createdAt?: Date | string
    updatedAt?: Date | string
    refreshToken?: RefreshTokenUncheckedCreateNestedOneWithoutUserInput
    trade?: TradeUncheckedCreateNestedManyWithoutUserInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutUserInput
    likedTrade?: TradeUncheckedCreateNestedManyWithoutLikedByInput
    likedTradeComment?: TradeCommentUncheckedCreateNestedManyWithoutLikedbyInput
  }

  export type UserCreateOrConnectWithoutTradeHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTradeHistoryInput, UserUncheckedCreateWithoutTradeHistoryInput>
  }

  export type TradeCreateWithoutTradeHistoryInput = {
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTradeInput
    likedBy?: UserCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentCreateNestedManyWithoutTradeInput
  }

  export type TradeUncheckedCreateWithoutTradeHistoryInput = {
    id?: number
    userId: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    likedBy?: UserUncheckedCreateNestedManyWithoutLikedTradeInput
    tradePicture?: TradePictureUncheckedCreateNestedManyWithoutTradeInput
    tradeComment?: TradeCommentUncheckedCreateNestedManyWithoutTradeInput
  }

  export type TradeCreateOrConnectWithoutTradeHistoryInput = {
    where: TradeWhereUniqueInput
    create: XOR<TradeCreateWithoutTradeHistoryInput, TradeUncheckedCreateWithoutTradeHistoryInput>
  }

  export type UserUpsertWithoutTradeHistoryInput = {
    update: XOR<UserUpdateWithoutTradeHistoryInput, UserUncheckedUpdateWithoutTradeHistoryInput>
    create: XOR<UserCreateWithoutTradeHistoryInput, UserUncheckedCreateWithoutTradeHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTradeHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTradeHistoryInput, UserUncheckedUpdateWithoutTradeHistoryInput>
  }

  export type UserUpdateWithoutTradeHistoryInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUpdateOneWithoutUserNestedInput
    trade?: TradeUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUpdateManyWithoutLikedbyNestedInput
  }

  export type UserUncheckedUpdateWithoutTradeHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUncheckedUpdateOneWithoutUserNestedInput
    trade?: TradeUncheckedUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUncheckedUpdateManyWithoutLikedByNestedInput
    likedTradeComment?: TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput
  }

  export type TradeUpsertWithoutTradeHistoryInput = {
    update: XOR<TradeUpdateWithoutTradeHistoryInput, TradeUncheckedUpdateWithoutTradeHistoryInput>
    create: XOR<TradeCreateWithoutTradeHistoryInput, TradeUncheckedCreateWithoutTradeHistoryInput>
    where?: TradeWhereInput
  }

  export type TradeUpdateToOneWithWhereWithoutTradeHistoryInput = {
    where?: TradeWhereInput
    data: XOR<TradeUpdateWithoutTradeHistoryInput, TradeUncheckedUpdateWithoutTradeHistoryInput>
  }

  export type TradeUpdateWithoutTradeHistoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeNestedInput
    likedBy?: UserUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutTradeHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserUncheckedUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUncheckedUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutTradeNestedInput
  }

  export type TradeCreateManyUserInput = {
    id?: number
    title: string
    content: string
    price: number
    region: string
    img: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeCommentCreateManyUserInput = {
    id?: number
    tradeId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryCreateManyUserInput = {
    id?: number
    tradeId: number
    type: $Enums.TradeType
  }

  export type TradeUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserUncheckedUpdateManyWithoutLikedTradeNestedInput
    tradePicture?: TradePictureUncheckedUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCommentUpdateWithoutUserInput = {
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedby?: UserUpdateManyWithoutLikedTradeCommentNestedInput
    trade?: TradeUpdateOneRequiredWithoutTradeCommentNestedInput
  }

  export type TradeCommentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedby?: UserUncheckedUpdateManyWithoutLikedTradeCommentNestedInput
  }

  export type TradeCommentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeUpdateWithoutLikedByInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeNestedInput
    tradePicture?: TradePictureUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateWithoutLikedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tradePicture?: TradePictureUncheckedUpdateManyWithoutTradeNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutTradeNestedInput
    tradeHistory?: HistoryUncheckedUpdateOneWithoutTradeNestedInput
  }

  export type TradeUncheckedUpdateManyWithoutLikedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCommentUpdateWithoutLikedbyInput = {
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeCommentNestedInput
    trade?: TradeUpdateOneRequiredWithoutTradeCommentNestedInput
  }

  export type TradeCommentUncheckedUpdateWithoutLikedbyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCommentUncheckedUpdateManyWithoutLikedbyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUpdateWithoutUserInput = {
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
    trade?: TradeUpdateOneRequiredWithoutTradeHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
  }

  export type HistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tradeId?: IntFieldUpdateOperationsInput | number
    type?: EnumTradeTypeFieldUpdateOperationsInput | $Enums.TradeType
  }

  export type TradePictureCreateManyTradeInput = {
    id?: number
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TradeCommentCreateManyTradeInput = {
    id?: number
    userId: number
    comment: string
    like?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutLikedTradeInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUpdateOneWithoutUserNestedInput
    trade?: TradeUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutUserNestedInput
    likedTradeComment?: TradeCommentUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikedTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUncheckedUpdateOneWithoutUserNestedInput
    trade?: TradeUncheckedUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutUserNestedInput
    likedTradeComment?: TradeCommentUncheckedUpdateManyWithoutLikedbyNestedInput
    tradeHistory?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLikedTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradePictureUpdateWithoutTradeInput = {
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradePictureUncheckedUpdateWithoutTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradePictureUncheckedUpdateManyWithoutTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TradeCommentUpdateWithoutTradeInput = {
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTradeCommentNestedInput
    likedby?: UserUpdateManyWithoutLikedTradeCommentNestedInput
  }

  export type TradeCommentUncheckedUpdateWithoutTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedby?: UserUncheckedUpdateManyWithoutLikedTradeCommentNestedInput
  }

  export type TradeCommentUncheckedUpdateManyWithoutTradeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    like?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutLikedTradeCommentInput = {
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUpdateOneWithoutUserNestedInput
    trade?: TradeUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUpdateManyWithoutLikedByNestedInput
    tradeHistory?: HistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikedTradeCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: RefreshTokenUncheckedUpdateOneWithoutUserNestedInput
    trade?: TradeUncheckedUpdateManyWithoutUserNestedInput
    tradeComment?: TradeCommentUncheckedUpdateManyWithoutUserNestedInput
    likedTrade?: TradeUncheckedUpdateManyWithoutLikedByNestedInput
    tradeHistory?: HistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLikedTradeCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    manner?: FloatFieldUpdateOperationsInput | number
    age?: NullableIntFieldUpdateOperationsInput | number | null
    gender?: NullableEnumGenderTypeFieldUpdateOperationsInput | $Enums.GenderType | null
    introduce?: NullableStringFieldUpdateOperationsInput | string | null
    socialId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    provider?: EnumProviderTypeFieldUpdateOperationsInput | $Enums.ProviderType
    role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TradeCountOutputTypeDefaultArgs instead
     */
    export type TradeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TradeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TradeCommentCountOutputTypeDefaultArgs instead
     */
    export type TradeCommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TradeCommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefreshTokenDefaultArgs instead
     */
    export type RefreshTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefreshTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TradeDefaultArgs instead
     */
    export type TradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TradeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TradePictureDefaultArgs instead
     */
    export type TradePictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TradePictureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TradeCommentDefaultArgs instead
     */
    export type TradeCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TradeCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistoryDefaultArgs instead
     */
    export type HistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}