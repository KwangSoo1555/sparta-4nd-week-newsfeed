// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 사용자 스키마 (관계 추가 필요)
model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  nickname  String       @unique
  imgUrl    String?      @map("img_url")
  password  String?
  region    String?
  // 소숫점 첫째 자리 까지 밖에 없는데 이것도 Int 로 바꾼 다음에 0 부터 1000 까지 범위를 정하고
  // 36.5 도를 디폴트로 설정한 다음 10을 나누면 소수점 첫째 자리로 고정.
  manner    Float        @default(36.5)
  age       Int?
  gender    GenderType?
  introduce String?
  socialId  String?      @map("social_id")
  provider  ProviderType @default(LOCAL)
  role      RoleType     @default(USER)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  refreshToken      RefreshToken?
  trade             Trade[]
  tradeComment      TradeComment[]
  likedTrade        Trade[]        @relation("trade_like")
  likedTradeComment TradeComment[] @relation("trade_comment_like")
  tradeHistory      History[]
  follower          Follow[]       @relation("following")
  following         Follow[]       @relation("follower")

  @@map("user")
}

// enum 값을 클라이언트에게서 받아올 때 스키마에 tinyInt 로 받은 다음 DB 에 저장하는 것이 서치 속도가 훨씬 빠르다.
// 클라이언트에서 받을 값들은 constant 에 정리.

// 성별
enum GenderType {
  MALE
  FEMALE
}

// 로그인 제공자
enum ProviderType {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
}

// 역할
enum RoleType {
  USER
  ADMIN
}

// refreshToken 스키마
model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

// 상품 스키마
model Trade {
  id        Int         @id @default(autoincrement())
  userId    Int         @map("user_id")
  title     String
  content   String      @db.Text
  price     Int
  region    String
  status    TradeStatus @default(FOR_SALE)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy      User[]         @relation("trade_like")
  tradePicture TradePicture[]
  tradeComment TradeComment[]
  tradeHistory History[]

  @@map("trade")
}

enum TradeStatus {
  FOR_SALE
  SOLD_OUT
  COMPLETE
}

// 상품 사진 스키마
model TradePicture {
  id        Int      @id @default(autoincrement())
  tradeId   Int      @map("trade_id")
  imgUrl    String   @map("img_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("trade_picture")
}

// 상품 댓글 스키마
model TradeComment {
  id        Int      @id @default(autoincrement())
  tradeId   Int      @map("trade_id")
  userId    Int      @map("user_id")
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedby User[] @relation("trade_comment_like")
  trade   Trade  @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("trade_comment")
}

// 상품 구매, 판매 내역 스키마
model History {
  id        Int       @id @default(autoincrement())
  tradeId   Int       @map("trade_id")
  userId    Int       @map("user_id")
  type      TradeType
  createdAt DateTime  @default(now()) @map("created_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  trade Trade @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("history")
}

// 상품 구매, 판매
enum TradeType {
  SALE
  PURCHASE
}

// 팔로우 
model Follow {
  id          Int @id @default(autoincrement())
  followerId  Int @map("follower_id")
  followingId Int @map("following_id")

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@map("follow")
}
