generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  nickname          String         @unique
  password          String?
  region            String?
  manner            Float          @default(36.5)
  age               Int?
  gender            GenderType?
  socialId          String?        @map("social_id")
  provider          user_provider  @default(LOCAL)
  role              RoleType       @default(USER)
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  introduce         String?
  history           History[]
  refreshToken      RefreshToken?
  trade             Trade[]
  tradeComment      TradeComment[]
  likedTradeComment TradeComment[] @relation("trade_comment_like")
  likedTrade        Trade[]        @relation("trade_like")
  follow  Follow[]
  

  @@map("user")
}

model Follow {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  followId Int @map("follow_id")
  followEmail String @map("follow_email")
  followName String @unique @map("follow_nickname")
  status String @map("status")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("follow")
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model Trade {
  id           Int            @id @default(autoincrement())
  userId       Int            @map("user_id")
  title        String
  content      String         @db.Text
  price        Int
  region       String
  like         Int            @default(0)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  tradeHistory History?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradeComment TradeComment[]
  tradePicture TradePicture[]
  likedBy      User[]         @relation("trade_like")

  @@index([userId], map: "trade_user_id_fkey")
  @@map("trade")
}

model TradePicture {
  id        Int      @id @default(autoincrement())
  tradeId   Int      @map("trade_id")
  imgUrl    String   @map("img_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@index([tradeId], map: "trade_picture_trade_id_fkey")
  @@map("trade_picture")
}

model TradeComment {
  id        Int      @id @default(autoincrement())
  tradeId   Int      @map("trade_id")
  userId    Int      @map("user_id")
  comment   String
  like      Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  trade     Trade    @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedby   User[]   @relation("trade_comment_like")

  @@index([tradeId], map: "trade_comment_trade_id_fkey")
  @@index([userId], map: "trade_comment_user_id_fkey")
  @@map("trade_comment")
}

model History {
  id            Int            @id @default(autoincrement())
  tradeId       Int            @unique @map("trade_id")
  status        history_status @default(SALE)
  buyer_id      Int?
  saler_id      Int
  sale_start_at DateTime       @default(now())
  updated_at    DateTime
  user          User           @relation(fields: [saler_id], references: [id], onDelete: Cascade)
  trade         Trade          @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@index([saler_id], map: "history_saler_id_fkey")
  @@map("history")
}

enum GenderType {
  MALE
  FEMALE
}

enum RoleType {
  USER
  ADMIN
}

enum history_status {
  SALE
  SOLDOUT
}

enum user_provider {
  LOCAL
  KAKAO
  GOOGLE
  NAVER
}