// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 사용자 스키마 (관계 추가 필요)
model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique
  nickname  String       @unique
  password  String?
  region    String
  manner    Int          @default(0)
  age       Int
  gender    GenderType
  socialId  String?      @map("social_id")
  provider  ProviderType @default(LOCAL)
  role      RoleType     @default(USER)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  refreshToken RefreshToken?
  trade        Trade[]

  @@map("user")
}

// 성별
enum GenderType {
  MALE
  FEMALE
}

// 로그인 제공자
enum ProviderType {
  LOCAL
  KAKAO
  GOOLE
}

// 역할
enum RoleType {
  USER
  ADMIN
}

// refreshToken 스키마
model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

// 상품 스키마
model Trade {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  title     String
  content   String   @db.Text
  price     Int
  region    String
  like      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
